/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Blurb;
import org.coredb.model.Dialogue;
import org.coredb.model.DialogueView;
import org.coredb.model.Insight;
import org.coredb.model.InsightView;
import org.coredb.model.Topic;
import org.coredb.model.TopicView;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface ConversationApi {

    @Operation(summary = "", description = "Add blurb to topic and dialog", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Blurb.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}/blurb",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Blurb> addConversationBlurb(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "schema of blurb" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "schema", required = true) String schema, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.DEFAULT, description = "blurb data", schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "", description = "Add a new dailogue", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(schema = @Schema(implementation = Dialogue.class))),
        
        @ApiResponse(responseCode = "400", description = "unknown token"),
        
        @ApiResponse(responseCode = "401", description = "token not authorized"),
        
        @ApiResponse(responseCode = "404", description = "specified amigo not found"),
        
        @ApiResponse(responseCode = "406", description = "account disabled"),
        
        @ApiResponse(responseCode = "429", description = "conversation limit reached"),
        
        @ApiResponse(responseCode = "500", description = "server error") })
    @RequestMapping(value = "/conversation/dialogue",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Dialogue> addConversationDialogue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "amigo to converse with" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId);


    @Operation(summary = "", description = "Retrieve specified dailogue", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Dialogue.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Dialogue> getConversationDialogue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId);


    @Operation(summary = "", description = "Retrieve list views", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = DialogueView.class)))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/view",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DialogueView>> getConversationDialogueViews(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Retrieve specified insight", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Insight.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/insight/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Insight> getConversationInsight(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "id of amigo" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId, @Parameter(in = ParameterIn.PATH, description = "id of insight", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId);


    @Operation(summary = "", description = "Retrieve list views", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = InsightView.class)))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/insight/view",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InsightView>> getConversationInsightViews(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Retrieve list topcis", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Topic.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}/topic/{topicId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Topic> getConversationTopic(@Parameter(in = ParameterIn.PATH, description = "id of specified dialog", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.PATH, description = "id of specified topic", required=true, schema=@Schema()) @PathVariable("topicId") String topicId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.QUERY, description = "only retrieve specified schema" ,schema=@Schema()) @Valid @RequestParam(value = "schema", required = false) String schema);


    @Operation(summary = "", description = "Retrieve list topcis", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = TopicView.class)))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}/topic/view",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TopicView>> getConversationTopicViews(@Parameter(in = ParameterIn.PATH, description = "id of specified dialog", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Remvoe specified blurb", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}/blurb/{blurbId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeConversationBlurb(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.PATH, description = "id of blurb", required=true, schema=@Schema()) @PathVariable("blurbId") String blurbId);


    @Operation(summary = "", description = "Remvoe specified dailogue", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeConversationDialogue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId);


    @Operation(summary = "", description = "Remove specified insight", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/insight/{dialogueId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeConversationInsight(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "id of contact" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId, @Parameter(in = ParameterIn.PATH, description = "id of insight", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId);


    @Operation(summary = "", description = "Update specified blurb", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Blurb.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}/blurb/{blurbId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Blurb> setConversationBlurb(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "schema of blurb" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "schema", required = true) String schema, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.PATH, description = "id of blurb", required=true, schema=@Schema()) @PathVariable("blurbId") String blurbId, @Parameter(in = ParameterIn.DEFAULT, description = "blurb data", schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "", description = "Update specified dailogue", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Dialogue.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/dialogue/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Dialogue> setConversationDialogue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "if insight has been created" ,schema=@Schema()) @Valid @RequestParam(value = "linked", required = false) Boolean linked, @Parameter(in = ParameterIn.QUERY, description = "if insight has been synced" ,schema=@Schema()) @Valid @RequestParam(value = "synced", required = false) Boolean synced, @Parameter(in = ParameterIn.QUERY, description = "if conversation can recived comments" ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active, @Parameter(in = ParameterIn.QUERY, description = "apply if version matches" ,schema=@Schema()) @Valid @RequestParam(value = "revision", required = false) Integer revision);


    @Operation(summary = "", description = "Update specified insight", tags={ "conversation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Insight.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/conversation/insight/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Insight> updateConversationInsight(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "id of contact" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId, @Parameter(in = ParameterIn.PATH, description = "id of insight", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "revision of linked dialogue" ,schema=@Schema()) @Valid @RequestParam(value = "revision", required = false) Integer revision);

}


