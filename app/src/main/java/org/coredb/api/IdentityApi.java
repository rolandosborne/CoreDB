/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Amigo;
import org.coredb.model.AmigoMessage;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.core.io.InputStreamResource;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "identity", description = "the identity API")
public interface IdentityApi {

    @ApiOperation(value = "", nickname = "getDirtyFlag", notes = "Get dirty flag for public profile which tells account holder if identity should be syncrhonized externally", response = Boolean.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Boolean.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/dirty",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> getDirtyFlag(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getIdentity", notes = "Get public profile data", response = Amigo.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Amigo.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Amigo> getIdentity(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getIdentityMessage", notes = "Get message for public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/message",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AmigoMessage> getIdentityMessage(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getIdentityRevision", notes = "Get revision of profile identity", response = Integer.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/identity/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getIdentityRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "setDirtyFlag", notes = "Update dirty flag for public profile indicating external synchronization state", tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/dirty",
        method = RequestMethod.PUT)
    ResponseEntity<Void> setDirtyFlag(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@NotNull @ApiParam(value = "dirty value to set", required = true) @Valid @RequestParam(value = "flag", required = true) Boolean flag
,@ApiParam(value = "apply only if at given revision") @Valid @RequestParam(value = "revision", required = false) Integer revision
);


    @ApiOperation(value = "", nickname = "updateDescription", notes = "Set account description in public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/description",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateDescription(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) String body
);


    @ApiOperation(value = "", nickname = "updateHandle", notes = "Set account handle in public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/handle",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateHandle(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) String body
);



    @ApiOperation(value = "", nickname = "getIdentityImage", notes = "Retrieve account logo", response = InputStreamResource.class, tags={ "identity", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InputStreamResource.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "token or id not found") })
    @RequestMapping(value = "/identity/image",
        produces = { "application/octet-stream" },
        method = RequestMethod.GET)
    ResponseEntity<InputStreamResource> getIdentityLogo(@NotNull @ApiParam(value = "share token for service", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "updateImage", notes = "Set account image in public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/image",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateImage(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) String body
);


    @ApiOperation(value = "", nickname = "updateLocation", notes = "Set account location in public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/location",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateLocation(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) String body
);


    @ApiOperation(value = "", nickname = "updateName", notes = "Set account name in public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/name",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateName(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) String body
);


    @ApiOperation(value = "", nickname = "updateRegistry", notes = "Set account registry in public profile", response = AmigoMessage.class, tags={ "identity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/identity/registry",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateRegistry(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) String body
);

}


