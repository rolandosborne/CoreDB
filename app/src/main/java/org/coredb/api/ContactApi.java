/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Attribute;
import org.coredb.model.AttributeView;
import org.coredb.model.AuthMessage;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "contact", description = "the contact API")
public interface ContactApi {

    @ApiOperation(value = "", nickname = "addContactAgent", notes = "Retrieve authorization for remote access", response = String.class, tags={ "contact", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/contact/agents",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> addContactAgent(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "updated access rights" ,required=true )  @Valid @RequestBody AuthMessage body
);


    @ApiOperation(value = "", nickname = "filterContactAttributes", notes = "Retrieve filtered set of attributes", response = Attribute.class, responseContainer = "List", tags={ "contact", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Attribute.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/contact/attributes/filter",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Attribute>> filterContactAttributes(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
,@ApiParam(value = ""  )  @Valid @RequestBody List<String> body
);



    @ApiOperation(value = "", nickname = "filterContactAttributeViews", notes = "Retrieve filtered set of attributes", response = AttributeView.class, responseContainer = "List", tags={ "contact", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeView.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/contact/attributes/view",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<AttributeView>> filterContactAttributeViews(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
,@ApiParam(value = ""  )  @Valid @RequestBody List<String> body
);




    @ApiOperation(value = "", nickname = "getContactAttribute", notes = "Retrieve specified subject", response = Attribute.class, tags={ "contact", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Attribute.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "token or id not found") })
    @RequestMapping(value = "/contact/attributes/{attributeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Attribute> getContactAttribute(@NotNull @ApiParam(value = "share token for service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of attribute",required=true) @PathVariable("attributeId") String attributeId
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
);


    @ApiOperation(value = "", nickname = "getContactRevision", notes = "Retrieve revision of contact moudle", response = Integer.class, tags={ "contact", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/contact/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getContactRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
);

}


