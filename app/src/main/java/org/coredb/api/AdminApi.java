/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.AccountEntry;
import org.coredb.model.AccountStatus;
import org.coredb.model.AlertEntry;
import org.coredb.model.Config;
import org.coredb.model.ConfigEntry;
import org.coredb.model.Amigo;
import org.coredb.model.AmigoMessage;
import org.coredb.model.AmigoToken;
import org.coredb.model.LinkMessage;
import org.coredb.model.ServerInfo;
import org.coredb.model.Service;
import org.coredb.model.SystemStat;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "admin", description = "the admin API")
public interface AdminApi {

    @ApiOperation(value = "", nickname = "addRegistryService", notes = "Add a new service entry", response = Service.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/registry/services",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Service> addRegistryService(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "new service to be added" ,required=true )  @Valid @RequestBody AmigoMessage body
,@ApiParam(value = "enabled state of service") @Valid @RequestParam(value = "enable", required = false) Boolean enable
);


    @ApiOperation(value = "", nickname = "addServerAccount", notes = "Add new account to server", response = AccountEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AccountEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AccountEntry> addServerAccount(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "addServerAlert", notes = "insert alert for target account", response = AlertEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AlertEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/alerts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AlertEntry> addServerAlert(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = "amigo to insert" ,required=true )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "addServerStat", notes = "Set stat record", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/server/stats",
        method = RequestMethod.POST)
    ResponseEntity<Void> addServerStat(@NotNull @Min(0) @Max(100) @ApiParam(value = "time", required = true, allowableValues = "") @Valid @RequestParam(value = "processor", required = true) Integer processor
,@NotNull @ApiParam(value = "current memory free", required = true) @Valid @RequestParam(value = "memory", required = true) Long memory
,@NotNull @ApiParam(value = "current storage free", required = true) @Valid @RequestParam(value = "storage", required = true) Long storage
,@ApiParam(value = "admin stat token") @Valid @RequestParam(value = "token", required = false) String token
);


    @ApiOperation(value = "", nickname = "adminStatus", notes = "get status of accounts", response = AccountStatus.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AccountStatus.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/accounts/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AccountStatus> adminStatus(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "deleteAccount", notes = "delete specified account", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAccount(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getAccountMessages", notes = "Retrieve list of registered accounts", response = AmigoMessage.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AmigoMessage>> getAccountMessages(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getAdminConfig", notes = "Get config value for specified key", response = ConfigEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConfigEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "key not found") })
    @RequestMapping(value = "/admin/server/configs/{configId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ConfigEntry> getAdminConfig(@NotNull @ApiParam(value = "service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "key of config to update",required=true) @PathVariable("configId") String configId
);


    @ApiOperation(value = "", nickname = "getAdminConfigs", notes = "config key value pairs are returned", response = ConfigEntry.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConfigEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/server/configs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ConfigEntry>> getAdminConfigs(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getRegistryService", notes = "Retrieve service from registry", response = Service.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/registry/services/{amigoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Service> getRegistryService(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of service item",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getRegistryServices", notes = "Retrieve list of matching services", response = Service.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/registry/services",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Service>> getRegistryServices(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getServerAccount", notes = "retrieve specified account", response = Amigo.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Amigo.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts/{amigoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Amigo> getServerAccount(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getServerAccounts", notes = "Retrieve list of registered accounts", response = AccountEntry.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AccountEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountEntry>> getServerAccounts(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getServerAlerts", notes = "insert alert for target account", response = AlertEntry.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AlertEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/alerts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AlertEntry>> getServerAlerts(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getServerConfig", notes = "Get config value for specified key", response = ConfigEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConfigEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "key not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/config/{configId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ConfigEntry> getServerConfig(@NotNull @ApiParam(value = "installation password for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account to access",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = "key of config to update",required=true) @PathVariable("configId") String configId
);


    @ApiOperation(value = "", nickname = "getServerConfigs", notes = "all config key value pairs are returned", response = ConfigEntry.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConfigEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/configs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ConfigEntry>> getServerConfigs(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account to access",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getServerStats", notes = "Get all server metrics", response = SystemStat.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SystemStat.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/server/stats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SystemStat>> getServerStats(@NotNull @ApiParam(value = "service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "removeAdminConfig", notes = "Restore default value for specified config key", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "key not found") })
    @RequestMapping(value = "/admin/server/configs/{configId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeAdminConfig(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "key of config to update",required=true) @PathVariable("configId") String configId
);


    @ApiOperation(value = "", nickname = "removeRegistryService", notes = "Delete service entry with matching id", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "entry not found") })
    @RequestMapping(value = "/admin/registry/services/{amigoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeRegistryService(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of entry to delete",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "removeServerAlert", notes = "Remove alert from target account", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/alerts/{alertId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeServerAlert(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = "id of alert entry",required=true) @PathVariable("alertId") String alertId
);


    @ApiOperation(value = "Reset config value to default value", nickname = "removeServerConfig", notes = "Restore default value for specified config key", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "key not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/config/{configId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeServerConfig(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account to access",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = "key of config to update",required=true) @PathVariable("configId") String configId
);


    @ApiOperation(value = "", nickname = "serverInfo", notes = "Get server health status", response = ServerInfo.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "sucessful operation", response = ServerInfo.class) })
    @RequestMapping(value = "/admin/info",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ServerInfo> serverInfo(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "setAccountService", notes = "Attach service to account", response = AmigoToken.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoToken.class),
        @ApiResponse(code = 401, message = "unknow token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 406, message = "service limit reached"),
        @ApiResponse(code = 423, message = "account or service is disabled"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/service",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AmigoToken> setAccountService(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of referenced account",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = ""  )  @Valid @RequestBody LinkMessage body
);


    @ApiOperation(value = "", nickname = "updateAdminConfig", notes = "Set config value to specified value in request payload", response = ConfigEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConfigEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "key not found") })
    @RequestMapping(value = "/admin/server/configs/{configId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ConfigEntry> updateAdminConfig(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "key of config to update",required=true) @PathVariable("configId") String configId
,@ApiParam(value = "new value for config key" ,required=true )  @Valid @RequestBody Config body
);


    @ApiOperation(value = "", nickname = "updateRegistryService", notes = "Update service state", response = Service.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Service.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/registry/services/{amigoId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Service> updateRegistryService(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "identifier for service entry",required=true) @PathVariable("amigoId") String amigoId
,@NotNull @ApiParam(value = "if service is enabled", required = true) @Valid @RequestParam(value = "enable", required = true) Boolean enable
);


    @ApiOperation(value = "", nickname = "updateServerAccountEnabled", notes = "increment identity revision", response = AccountEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AccountEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/enabled",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AccountEntry> updateServerAccountEnabled(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
,@NotNull @ApiParam(value = "enabled state", required = true) @Valid @RequestParam(value = "flag", required = true) Boolean flag
);


    @ApiOperation(value = "", nickname = "updateServerAccountRegistry", notes = "update registry of amigo", response = AmigoMessage.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/registry",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateServerAccountRegistry(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
,@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "url", required = true) String url
);


    @ApiOperation(value = "", nickname = "updateServerAccountRevision", notes = "increment identity revision", response = AmigoMessage.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoMessage.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/revision",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AmigoMessage> updateServerAccountRevision(@NotNull @ApiParam(value = "installation token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "updateServerConfig", notes = "Set config value to specified value in request payload", response = ConfigEntry.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConfigEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "key not found") })
    @RequestMapping(value = "/admin/accounts/{amigoId}/config/{configId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ConfigEntry> updateServerConfig(@NotNull @ApiParam(value = "installation token for admin access", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of account to access",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = "key of config to update",required=true) @PathVariable("configId") String configId
,@ApiParam(value = "new value for config key" ,required=true )  @Valid @RequestBody Config body
);

}


