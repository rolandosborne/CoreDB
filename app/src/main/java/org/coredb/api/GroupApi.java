/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.LabelEntry;
import org.coredb.model.LabelView;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "group", description = "the group API")
public interface GroupApi {

    @ApiOperation(value = "", nickname = "addLabel", notes = "Add a new label entry", response = LabelEntry.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = LabelEntry.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/group/labels",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LabelEntry> addLabel(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "name for new label") @Valid @RequestParam(value = "name", required = false) String name
);


    @ApiOperation(value = "", nickname = "getGroupRevision", notes = "Retrieve revision of group module", response = Integer.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/group/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getGroupRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getLabels", notes = "Retrieve specified set of labels", response = LabelView.class, responseContainer = "List", tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LabelView.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/group/labels/view",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<LabelView>> getLabelViews(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getLabels", notes = "Retrieve specified set of labels", response = LabelEntry.class, responseContainer = "List", tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LabelEntry.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/group/labels",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<LabelEntry>> getLabels(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getLabel", notes = "Get label entry", tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "label not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/group/labels/{labelId}",
        method = RequestMethod.GET)
    ResponseEntity<LabelEntry> getLabel(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of label to get",required=true) @PathVariable("labelId") String labelId
);


    @ApiOperation(value = "", nickname = "removeLabel", notes = "Rewmove label entry", tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "label not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/group/labels/{labelId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeLabel(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of label to delete",required=true) @PathVariable("labelId") String labelId
);


    @ApiOperation(value = "", nickname = "updateLabelName", notes = "Update label name", response = LabelEntry.class, tags={ "group", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LabelEntry.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "label not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/group/labels/{labelId}/name",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<LabelEntry> updateLabelName(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of label to update",required=true) @PathVariable("labelId") String labelId
,@NotNull @ApiParam(value = "updated name for label", required = true) @Valid @RequestParam(value = "name", required = true) String name
);

}


