/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Attribute;
import org.coredb.model.AttributeEntry;
import org.coredb.model.AttributeView;
import org.coredb.model.LabelEntry;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "profile", description = "the profile API")
public interface ProfileApi {

    @ApiOperation(value = "", nickname = "addAttribute", notes = "Add a new attribute", response = AttributeEntry.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/profile/attributes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AttributeEntry> addAttribute(@NotNull @ApiParam(value = "share service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@NotNull @ApiParam(value = "schema of attribute", required = true) @Valid @RequestParam(value = "schema", required = true) String schema
,@ApiParam(value = "payload of attribute"  )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "clearAttributeLabel", notes = "Remove label assignment from attribute", response = AttributeEntry.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "attribute not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/attributes/{attributeId}/labels/{labelId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<AttributeEntry> clearAttributeLabel(@NotNull @ApiParam(value = "share token with service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of attribute",required=true) @PathVariable("attributeId") String attributeId
,@ApiParam(value = "id of label",required=true) @PathVariable("labelId") String labelId
);


    @ApiOperation(value = "", nickname = "filterAttributes", notes = "Retrieve filtered set of attributes", response = AttributeEntry.class, responseContainer = "List", tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/attributes/filter",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<AttributeEntry>> filterAttributes(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody List<String> body
);


    @ApiOperation(value = "", nickname = "getAttribute", notes = "Retrieve specified attribute", response = AttributeEntry.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/profile/attributes/{attributeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AttributeEntry> getAttribute(@NotNull @ApiParam(value = "share service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of attribute",required=true) @PathVariable("attributeId") String attributeId
);


    @ApiOperation(value = "", nickname = "getProfileLabels", notes = "Retrieve list of labels. (functionally the same as /group/labels)", response = LabelEntry.class, responseContainer = "List", tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = LabelEntry.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/labels",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<LabelEntry>> getProfileLabels(@NotNull @ApiParam(value = "token assigned to service", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getProfileRevision", notes = "Retrieve revision of profile module", response = Integer.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/profile/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getProfileRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "removeAttribute", notes = "Remove specified attribute", tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/profile/attributes/{attributeId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeAttribute(@NotNull @ApiParam(value = "share service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of subject",required=true) @PathVariable("attributeId") String attributeId
);


    @ApiOperation(value = "", nickname = "setAttribute", notes = "Retrieve specified attribute", response = AttributeEntry.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/profile/attributes/{attributeId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AttributeEntry> setAttribute(@NotNull @ApiParam(value = "share service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@NotNull @ApiParam(value = "schema of attribute", required = true) @Valid @RequestParam(value = "schema", required = true) String schema
,@ApiParam(value = "id of attribute",required=true) @PathVariable("attributeId") String attributeId
,@ApiParam(value = "payload of attribute"  )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "setAttributeLabel", notes = "Assign a label to an attribute entry", response = AttributeEntry.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "attribute not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/attributes/{attributeId}/labels/{labelId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AttributeEntry> setAttributeLabel(@NotNull @ApiParam(value = "share token with service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of attribute",required=true) @PathVariable("attributeId") String attributeId
,@ApiParam(value = "id of label",required=true) @PathVariable("labelId") String labelId
);


    @ApiOperation(value = "", nickname = "setAttributeLabels", notes = "Set label association", response = AttributeEntry.class, responseContainer = "List", tags={ "index", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "attribute not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/attributes/{attributeId}/labels",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AttributeEntry> setAttributeLabels(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token, @ApiParam(value = "referenced attribute entry",required=true) @PathVariable("attributeId") String attributeId, @ApiParam(value = ""  )  @Valid @RequestBody List<String> body);



    @ApiOperation(value = "", nickname = "viewAttributes", notes = "Retrieve attribute label association", response = AttributeEntry.class, responseContainer = "List", tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AttributeEntry.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/attributes/view",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<AttributeView>> viewAttributes(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = ""  )  @Valid @RequestBody List<String> body
);

}


