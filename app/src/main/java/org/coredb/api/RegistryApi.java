/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.AmigoMessage;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import org.springframework.core.io.InputStreamResource;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface RegistryApi {

    @Operation(summary = "", description = "Get id associated with handle", tags={ "registry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/registry/amigo/id",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getId(@NotNull @Parameter(in = ParameterIn.QUERY, description = "handle to validate" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "handle", required = true) String handle, @Parameter(in = ParameterIn.QUERY, description = "wrap response in quotes" ,schema=@Schema()) @Valid @RequestParam(value = "wrap", required = false) Boolean wrap);


    @Operation(summary = "", description = "Retrieve image from current amigo message", tags={ "registry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "404", description = "not found") })
    @RequestMapping(value = "/registry/amigo/messages/logo",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<InputStreamResource> getLogo(@Parameter(in = ParameterIn.QUERY, description = "referenced id" ,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = false) String amigoId, @Parameter(in = ParameterIn.QUERY, description = "referenced handle" ,schema=@Schema()) @Valid @RequestParam(value = "handle", required = false) String handle);


    @Operation(summary = "", description = "Retrieve amigo message associated with handle", tags={ "registry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AmigoMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "not found") })
    @RequestMapping(value = "/registry/amigo/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AmigoMessage> getMessage(@Parameter(in = ParameterIn.QUERY, description = "referenced id" ,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = false) String amigoId, @Parameter(in = ParameterIn.QUERY, description = "referenced handle" ,schema=@Schema()) @Valid @RequestParam(value = "handle", required = false) String handle);


    @Operation(summary = "", description = "Retrieve name from current amigo message", tags={ "registry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "404", description = "not found") })
    @RequestMapping(value = "/registry/amigo/messages/name",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getName(@Parameter(in = ParameterIn.QUERY, description = "referenced id" ,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = false) String amigoId, @Parameter(in = ParameterIn.QUERY, description = "referenced handle" ,schema=@Schema()) @Valid @RequestParam(value = "handle", required = false) String handle);


    @Operation(summary = "", description = "Retrieve revision of current amigo message", tags={ "registry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))),
        
        @ApiResponse(responseCode = "404", description = "not found") })
    @RequestMapping(value = "/registry/amigo/messages/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getRegistryRevision(@Parameter(in = ParameterIn.QUERY, description = "referenced id" ,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = false) String amigoId, @Parameter(in = ParameterIn.QUERY, description = "referenced handle" ,schema=@Schema()) @Valid @RequestParam(value = "handle", required = false) String handle);

}


