/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.PromptEntry;
import org.coredb.model.PromptQuestion;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "prompt", description = "the prompt API")
public interface PromptApi {

    @ApiOperation(value = "", nickname = "addQuestion", notes = "Create a new prompt question", response = PromptEntry.class, tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PromptEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/prompt/questions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PromptEntry> addQuestion(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "new question to be appended" ,required=true )  @Valid @RequestBody PromptQuestion body
);


    @ApiOperation(value = "", nickname = "addQuestionAnswer", notes = "Prompt question to add", response = PromptEntry.class, tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PromptEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/prompt/questions/{promptId}/answers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PromptEntry> addQuestionAnswer(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of associated question",required=true) @PathVariable("promptId") String promptId
,@ApiParam(value = "new answer to be appended" ,required=true )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "deleteQuestionAnswer", notes = "Delete prompt answer entry", response = PromptEntry.class, tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PromptEntry.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "entry not found") })
    @RequestMapping(value = "/prompt/questions/{promptId}/answers/{answerId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<PromptEntry> deleteQuestionAnswer(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of question entry",required=true) @PathVariable("promptId") String promptId
,@ApiParam(value = "id of answer entry",required=true) @PathVariable("answerId") String answerId
);


    @ApiOperation(value = "", nickname = "getPromptRevision", notes = "Retrieve revision of prompt module", response = Integer.class, tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/prompt/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getPromptRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getQuestions", notes = "Retrieve prompt entries", response = PromptEntry.class, responseContainer = "List", tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PromptEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/prompt/questions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PromptEntry>> getQuestions(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "removeQuestion", notes = "Delete prompt entry", tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "entry not found") })
    @RequestMapping(value = "/prompt/questions/{promptId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeQuestion(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of entry to delete",required=true) @PathVariable("promptId") String promptId
);


    @ApiOperation(value = "", nickname = "updateQuestion", notes = "Update prompt entry", response = PromptEntry.class, tags={ "prompt", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PromptEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/prompt/questions/{promptId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<PromptEntry> updateQuestion(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of prompt entry",required=true) @PathVariable("promptId") String promptId
,@ApiParam(value = "new request to be appended" ,required=true )  @Valid @RequestBody PromptQuestion body
);

}


