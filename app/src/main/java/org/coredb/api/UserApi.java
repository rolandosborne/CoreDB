/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Amigo;
import org.coredb.model.UserEntry;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "", nickname = "getUser", notes = "Retrieve user entry for service", response = UserEntry.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/user/amigos/{amigoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserEntry> getUser(@NotNull @ApiParam(value = "Service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "uuid of user entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getUserIdentity", notes = "Retrieve user entry for service", response = Amigo.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Amigo.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/user/amigos/{amigoId}/identity",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Amigo> getUserIdentity(@NotNull @ApiParam(value = "Service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "uuid of user entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getUserRevision", notes = "Retrieve revision of user module", response = Integer.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/user/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getUserRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getUsers", notes = "Retrive list of users for service", response = UserEntry.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/user/amigos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserEntry>> getUsers(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "removeUser", notes = "Delete user entry", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/user/amigos/{amigoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeUser(@NotNull @ApiParam(value = "service-access-token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of service entry",required=true) @PathVariable("amigoId") String amigoId
);

}

