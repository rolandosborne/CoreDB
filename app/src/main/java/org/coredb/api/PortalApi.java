/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Amigo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface PortalApi {

    @Operation(summary = "", description = "Create new account token", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "generated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/account",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> accountToken(@NotNull @Parameter(in = ParameterIn.QUERY, description = "device username" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "alias", required = true) String alias, @NotNull @Parameter(in = ParameterIn.QUERY, description = "device password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Check if username is available", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/username",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkLogin(@NotNull @Parameter(in = ParameterIn.QUERY, description = "id of account" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String username, @Parameter(in = ParameterIn.QUERY, description = "id of requestor" ,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = false) String amigoId);


    @Operation(summary = "", description = "Check if token is valid", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/account",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkToken(@NotNull @Parameter(in = ParameterIn.QUERY, description = "admin generated token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Get profile of account", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Amigo.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "404", description = "handle not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/amigos/{amigoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Amigo> getDeviceAmigoProfile(@Parameter(in = ParameterIn.PATH, description = "id of amigo to access", required=true, schema=@Schema()) @PathVariable("amigoId") String amigoId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "handle to use" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "handle", required = true) String handle, @NotNull @Parameter(in = ParameterIn.QUERY, description = "login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Get list of accounts", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "404", description = "handle not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/amigos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> getDeviceAmigos(@NotNull @Parameter(in = ParameterIn.QUERY, description = "handle to use" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "handle", required = true) String handle, @NotNull @Parameter(in = ParameterIn.QUERY, description = "login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Get public profile data", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Amigo.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "404", description = "handle not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/profile",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Amigo> getProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "handle to use" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "handle", required = true) String handle, @NotNull @Parameter(in = ParameterIn.QUERY, description = "login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Reset portal login", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "authentication set", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Amigo.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/profile/login",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Amigo> resetLogin(@NotNull @Parameter(in = ParameterIn.QUERY, description = "id of account" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "new account handle" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "newUsername", required = true) String newUsername, @NotNull @Parameter(in = ParameterIn.QUERY, description = "new login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Reset portal password", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "authentication set", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Amigo.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/profile/password",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Amigo> resetPassword(@NotNull @Parameter(in = ParameterIn.QUERY, description = "new login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password, @NotNull @Parameter(in = ParameterIn.QUERY, description = "token to grant permission" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Create password reset token", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "generated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/account",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<String> resetToken(@NotNull @Parameter(in = ParameterIn.QUERY, description = "id of amigo to access" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "device username" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "alias", required = true) String alias, @NotNull @Parameter(in = ParameterIn.QUERY, description = "device password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Generate pass code", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "generated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/profile/passcode",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<String> setPassCode(@NotNull @Parameter(in = ParameterIn.QUERY, description = "username of account" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "portal login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Add a new profile", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Amigo.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "404", description = "handle not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/profile",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Amigo> setProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "username to use" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password, @NotNull @Parameter(in = ParameterIn.QUERY, description = "account create token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Remove account from node", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "404", description = "handle not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/amigos/{amigoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeDeviceAmigoProfile(@Parameter(in = ParameterIn.PATH, description = "id of amigo to access", required=true, schema=@Schema()) @PathVariable("amigoId") String amigoId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "device alias" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "alias", required = true) String alias, @NotNull @Parameter(in = ParameterIn.QUERY, description = "login password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "", description = "Check if admin has been set", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/admin",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> checkAdmin();


    @Operation(summary = "", description = "Set admin params", tags={ "portal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "success"),
        
        @ApiResponse(responseCode = "401", description = "invalid password"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/portal/admin",
        method = RequestMethod.PUT)
    ResponseEntity<Void> setAdmin(@NotNull @Parameter(in = ParameterIn.QUERY, description = "username for admin" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "password for admin" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password, @NotNull @Parameter(in = ParameterIn.QUERY, description = "domain of node" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "domain", required = true) String domain);

}


