/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.AmigoEntry;
import org.coredb.model.ShareEntry;
import org.coredb.model.ShareView;
import org.coredb.model.ShareMessage;
import org.coredb.model.ShareStatus;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "share", description = "the share API")
public interface ShareApi {

    @ApiOperation(value = "", nickname = "addConnection", notes = "Create new share entry", response = ShareEntry.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/connections",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ShareEntry> addConnection(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@NotNull @ApiParam(value = "id of amigo", required = true) @Valid @RequestParam(value = "amigoId", required = true) String amigoId
);


    @ApiOperation(value = "", nickname = "getConnection", notes = "Retrieve a share entry", response = ShareEntry.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/connections/{shareId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ShareEntry> getConnection(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id referencing share entry",required=true) @PathVariable("shareId") String shareId
);


    @ApiOperation(value = "", nickname = "getConnections", notes = "Retrieve list of share entries", response = ShareView.class, responseContainer = "List", tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareView.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/connections/view",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ShareView>> getConnectionViews(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getConnections", notes = "Retrieve list of share entries", response = ShareEntry.class, responseContainer = "List", tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/connections",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ShareEntry>> getConnections(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getRevision", notes = "Retrieve revision of share module", response = Integer.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getShareAmigos", notes = "Retrieve amigo data", response = AmigoEntry.class, responseContainer = "List", tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AmigoEntry.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/share/amigos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AmigoEntry>> getShareAmigos(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getShareMessage", notes = "Retrieve share entry message", response = ShareMessage.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareMessage.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/{shareId}/message",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ShareMessage> getShareMessage(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id referencing share entry",required=true) @PathVariable("shareId") String shareId
);


    @ApiOperation(value = "", nickname = "removeConnection", notes = "Delete a share entry", tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/connections/{shareId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeConnection(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id referencing share entry",required=true) @PathVariable("shareId") String shareId
);


    @ApiOperation(value = "", nickname = "setAnswer", notes = "Response to share prompt", response = ShareStatus.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareStatus.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/answers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ShareStatus> setAnswer(@NotNull @ApiParam(value = "token identifying prompt session", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "new share request"  )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "setShareMessage", notes = "Deliver share message", response = ShareStatus.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareStatus.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/messages",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ShareStatus> setShareMessage(@NotNull @ApiParam(value = "id of requested amigo", required = true) @Valid @RequestParam(value = "amigoId", required = true) String amigoId
,@ApiParam(value = "new share request"  )  @Valid @RequestBody ShareMessage body
);


    @ApiOperation(value = "", nickname = "updateConnection", notes = "retrieve share entry", response = ShareEntry.class, tags={ "share", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ShareEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/share/connections/{shareId}/status",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ShareEntry> updateConnection(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id referencing share entry",required=true) @PathVariable("shareId") String shareId
,@NotNull @ApiParam(value = "state of share to update", required = true, allowableValues = "requesting, requested, received, connected, closing, closed") @Valid @RequestParam(value = "status", required = true) String status
,@ApiParam(value = "token to query amigo") @Valid @RequestParam(value = "shareToken", required = false) String shareToken
);

}


