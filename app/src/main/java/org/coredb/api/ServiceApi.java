/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.ServiceAccess;
import org.coredb.model.ServiceEntry;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "service", description = "the service API")
public interface ServiceApi {

    @ApiOperation(value = "", nickname = "deleteApp", notes = "Delete app entry", tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/service/amigos/{amigoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteApp(@NotNull @ApiParam(value = "Service token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of service entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getApps", notes = "Retrive list of apps", response = ServiceEntry.class, responseContainer = "List", tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ServiceEntry.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/service/amigos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ServiceEntry>> getApps(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "getServiceEntry", notes = "Get service entry", response = ServiceEntry.class, tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ServiceEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/service/amigos/{amigoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ServiceEntry> getServiceEntry(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of service entry",required=true) @PathVariable("amigoId") String amigoId
);


    @ApiOperation(value = "", nickname = "getServiceRevision", notes = "Retrieve revision for service module", response = Integer.class, tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/service/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getServiceRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);


    @ApiOperation(value = "", nickname = "setServicePermission", notes = "Set authorized access for app", response = ServiceEntry.class, tags={ "service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ServiceEntry.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/service/amigos/{amigoId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ServiceEntry> setServicePermission(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of service entry",required=true) @PathVariable("amigoId") String amigoId
,@ApiParam(value = "updated access rights" ,required=true )  @Valid @RequestBody ServiceAccess body
);

}

