/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.Blurb;
import org.coredb.model.Dialogue;
import org.coredb.model.Insight;
import org.coredb.model.Topic;
import org.coredb.model.TopicView;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface CommentaryApi {

    @Operation(summary = "", description = "Add comment to topic and dialog", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Blurb.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}/blurb",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Blurb> addCommentaryBlurb(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "schema of blurb" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "schema", required = true) String schema, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent, @Parameter(in = ParameterIn.DEFAULT, description = "blurb data", schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "", description = "Add reference to dialog", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(schema = @Schema(implementation = Insight.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/insight",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Insight> addCommentaryInsight(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.QUERY, description = "id for new conversation" ,schema=@Schema()) @Valid @RequestParam(value = "dialogueId", required = false) String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "revision of conversation" ,schema=@Schema()) @Valid @RequestParam(value = "revision", required = false) Integer revision, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent);


    @Operation(summary = "", description = "Retrieve specified dailogue", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Dialogue.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Dialogue> getCommentaryDialogue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent);


    @Operation(summary = "", description = "Retrieve list topcis", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Topic.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}/topic/{topicId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Topic> getCommentaryTopic(@Parameter(in = ParameterIn.PATH, description = "id of specified dialog", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.PATH, description = "id of specified topic", required=true, schema=@Schema()) @PathVariable("topicId") String topicId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.QUERY, description = "only retrieve specified schema" ,schema=@Schema()) @Valid @RequestParam(value = "schema", required = false) String schema, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent);


    @Operation(summary = "", description = "Retrieve list topcis", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = TopicView.class)))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}/topic/view",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TopicView>> getCommentaryTopicViews(@Parameter(in = ParameterIn.PATH, description = "id of specified dialog", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent);


    @Operation(summary = "", description = "Remvoe specified blurb", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}/blurb/{blurbId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeCommentaryBlurb(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.PATH, description = "id of blurb", required=true, schema=@Schema()) @PathVariable("blurbId") String blurbId, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent);


    @Operation(summary = "", description = "Remove reference to dialog", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/insight/{dialogueId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeCommentaryInsight(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue to remove", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent);


    @Operation(summary = "", description = "Update specified blurb", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Blurb.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}/blurb/{blurbId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Blurb> setCommentaryBlurb(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "schema of blurb" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "schema", required = true) String schema, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.PATH, description = "id of blurb", required=true, schema=@Schema()) @PathVariable("blurbId") String blurbId, @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,schema=@Schema()) @Valid @RequestParam(value = "agent", required = false) String agent, @Parameter(in = ParameterIn.DEFAULT, description = "blurb data", schema=@Schema()) @Valid @RequestBody String body);


    @Operation(summary = "", description = "Update specified dailogue state", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Dialogue.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/dialogue/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Dialogue> updateCommentaryDialogue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "agent", required = true) String agent, @Parameter(in = ParameterIn.PATH, description = "id of dialogue", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @Parameter(in = ParameterIn.QUERY, description = "if still active" ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active, @Parameter(in = ParameterIn.QUERY, description = "if insight has been synced" ,schema=@Schema()) @Valid @RequestParam(value = "synced", required = false) Boolean synced, @Parameter(in = ParameterIn.QUERY, description = "apply if version matches" ,schema=@Schema()) @Valid @RequestParam(value = "revision", required = false) Integer revision);


    @Operation(summary = "", description = "Update reference to dialog", tags={ "commentary" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(schema = @Schema(implementation = Insight.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied"),
        
        @ApiResponse(responseCode = "404", description = "token or id not found") })
    @RequestMapping(value = "/commentary/insight/{dialogueId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Insight> updateCommentaryInsight(@NotNull @Parameter(in = ParameterIn.QUERY, description = "share token for service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.PATH, description = "id of dialogue to remove", required=true, schema=@Schema()) @PathVariable("dialogueId") String dialogueId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "token from delivered auth message" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "agent", required = true) String agent, @Parameter(in = ParameterIn.QUERY, description = "revision of remote dialog" ,schema=@Schema()) @Valid @RequestParam(value = "revision", required = false) Integer revision);

}


