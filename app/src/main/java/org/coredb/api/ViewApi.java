/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import org.coredb.model.AuthMessage;
import org.springframework.core.io.Resource;
import org.springframework.core.io.InputStreamResource;
import org.coredb.model.SubjectView;
import org.coredb.model.Subject;
import org.coredb.model.SubjectTag;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "view", description = "the view API")
public interface ViewApi {

    @ApiOperation(value = "", nickname = "addViewAgent", notes = "Retrieve authorization for remote access", response = String.class, tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/view/agents",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> addViewAgent(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "updated access rights" ,required=true )  @Valid @RequestBody AuthMessage body
);


    @ApiOperation(value = "", nickname = "filterViewSubjects", notes = "Retrieve filtered set of subjects", response = Subject.class, responseContainer = "List", tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Subject.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/view/subjects/filter",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Subject>> filterViewSubjects(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
,@ApiParam(value = ""  )  @Valid @RequestBody List<String> body
);


    @ApiOperation(value = "", nickname = "filterViewRevisions", notes = "Retrieve filtered set of subjects", response = SubjectView.class, responseContainer = "List", tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubjectView.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/view/subjects/view",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<SubjectView>> filterViewRevisions(@NotNull @ApiParam(value = "share token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
,@ApiParam(value = ""  )  @Valid @RequestBody List<String> body
);


    @ApiOperation(value = "", nickname = "getViewRevision", notes = "Retrieve revision of view module", response = Integer.class, tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/view/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getViewRevision(@NotNull @ApiParam(value = "service access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
);


    @ApiOperation(value = "", nickname = "getViewSubject", notes = "Retrieve specified subject", response = Subject.class, tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Subject.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "token or id not found") })
    @RequestMapping(value = "/view/subjects/{subjectId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Subject> getViewSubject(@NotNull @ApiParam(value = "share token for service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of subject",required=true) @PathVariable("subjectId") String subjectId
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
);


    @ApiOperation(value = "", nickname = "getViewSubjectAsset", notes = "Retrieve specified asset", response = InputStreamResource.class, tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InputStreamResource.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "token or id not found") })
    @RequestMapping(value = "/view/subjects/{subjectId}/assets/{assetId}",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<InputStreamResource> getViewSubjectAsset(@NotNull @ApiParam(value = "share token for service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of subject",required=true) @PathVariable("subjectId") String subjectId
,@ApiParam(value = "id of asset",required=true) @PathVariable("assetId") String assetId
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
);

    @ApiOperation(value = "", nickname = "getViewSubjectTags", notes = "Retrieve tags attached to specified subject", response = SubjectTag.class, tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubjectTag.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/view/subjects/{subjectId}/tags",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubjectTag> getViewSubjectTags(@NotNull @ApiParam(value = "token assigned to service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of subject",required=true) @PathVariable("subjectId") String subjectId
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
,@ApiParam(value = "type of tags to retrieve") @Valid @RequestParam(value = "schema", required = false) String schema
,@ApiParam(value = "order by earliest first") @Valid @RequestParam(value = "descending", required = false) Boolean descending
);


    @ApiOperation(value = "", nickname = "addViewSubjectTag", notes = "Retrieve tags attached to specified subject", response = SubjectTag.class, tags={ "view", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SubjectTag.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/view/subjects/{subjectId}/tags",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SubjectTag> addViewSubjectTag(@NotNull @ApiParam(value = "token assigned to service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of subject",required=true) @PathVariable("subjectId") String subjectId
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
,@ApiParam(value = "type of tags to add") @Valid @RequestParam(value = "schema", required = false) String schema
,@ApiParam(value = "order by earliest first") @Valid @RequestParam(value = "descending", required = false) Boolean descending
,@ApiParam(value = "stringified data object"  )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "removeViewSubjectTag", notes = "Remove tag attached to subject", response = SubjectTag.class, tags={ "view", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SubjectTag.class),
        @ApiResponse(code = 401, message = "unknown token"),
        @ApiResponse(code = 404, message = "tag not found"),
        @ApiResponse(code = 405, message = "permission not granted for token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/view/subjects/{subjectId}/tags/{tagId}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<SubjectTag> removeViewSubjectTag(@NotNull @ApiParam(value = "token assigned to service", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@ApiParam(value = "id of subject",required=true) @PathVariable("subjectId") String subjectId
,@ApiParam(value = "id of tag",required=true) @PathVariable("tagId") String tagId
,@ApiParam(value = "type of tags to retrieve") @Valid @RequestParam(value = "schema", required = false) String schema
,@ApiParam(value = "order by earliest first") @Valid @RequestParam(value = "descending", required = false) Boolean descending
,@ApiParam(value = "token from delivered auth message") @Valid @RequestParam(value = "agent", required = false) String agent
);

}


