openapi: 3.0.0
info:
  description:
    An interface to distributed nodes for personal storage. An account holder is referred to
    as an amigo, and content can be shared and referenced by labels.
    The following custom formatk types will be used throughout the API
      secure-token - hex encoded 256 bit random number
      pass-token - hex encoded 32 bit random number
      amigo-id - hex encoded sha256 of an amigo 4096 public key
      label-id - uuid without the dashes
      attribute-id - uuid without the dashes
      attribute-key - hex encoded sha256 of attribute schema
      alert-id - uuid without the dashes
      config-id - system defined strings
      prompt-id - uuid without the dashes
      answer-id - uuid without the dashes
      subject-id - uuid without the dashes
      subject-key - hex encoded sha256 of subject schema
      tag-id - uuid without the dashes
      tag-key - hex encoded sha256 of tag schema
      asset-id - uuid without the dashes
      ref-id - uuid without the dashes
      dialogue-id - uuid without the dashes
      blurb-id - uuid without the dashes
      topic-id - uuid without the dashes
      blurb-key - hex encoded sha256 of comment schema
      amigo-key - hex encoded public key
      base-image - base64 encoded image data
      signature - base64 encoded signature
      protocol-version - string comprising of "xx.yyyy.zzzz-stack"
          xx - 2 digit hex value for major version
          yyy - 3 digit hex value for minor version
          zzzz - 4 digit hex value for build version
          stack - up to 16 character string for stack name

  version: "1.0.4"
  title: Diatum CoreDB API
  contact:
    email: info@diatum.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:

  - name: token
    description: interface to query token permissions

  - name: access
    description: interface for connecting to accounts

  - name: account
    description: interface for acount configuration and metrics

  - name: service
    description: interface to manage installed services

  - name: user
    description: interface to manage registered users

  - name: prompt
    description: interface for managing prompts

  - name: identity
    description: interface for managing public profile

  - name: listing
    description: interface for retriving public profile

  - name: share
    description: interface for requesting share connection

  - name: agent
    description: interface for getting and setting amigo service access

  - name: group
    description: interface for managing labels

  - name: index
    description: interface for managing amigos

  - name: profile
    description: interface for managing attributes

  - name: contact
    description: interface for viewing amigo's attributes

  - name: show
    description: interface for managing subjects

  - name: view
    description: interface for viewing amigo's subjects

  - name: conversation
    description: interface for managing own canvases and insights

  - name: commentary
    description: interface for managing amigo canvases and insights
    
  - name: registry
    description: interface for local registry
    
  - name: portal
    description: interface for local portal

  - name: admin
    description: management of admin functionality


paths:

  /access/amigos:
    post:
      tags:
        - access
      description: Create an independent account or service
      operationId: create-amigo
      parameters:
        - name: token
          in: query
          description: admin token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoToken'
        '401':
          description: unknown token
        '406':
          description: account limit reached
        '500':
          description: internal server error

  /access/services/created:
    post:
      tags:
        - access
      description: Generate an authorization message for creating a new account on behalf of specified service account and granting the specified access to that service.
      operationId: authorize-create
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkMessage'
        '401':
          description: unknow token
        '406':
          description: account limit reached
        '405':
          description: permission not granted for token
        '423':
          description: account or service is disabled
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccess'

  /access/services/attached:
    post:
      tags:
        - access
      description: Generate an authorization message for requesting access to a specified account by the specified service.
      operationId: authorize-attach
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: query
          description: id of account to attach
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkMessage'
        '401':
          description: unknown token
        '406':
          description: account limit reached
        '405':
          description: permission not granted for token
        '423':
          description: account or service is disabled
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccess'

  /access/accounts/created:
    post:
      tags:
        - access
      description: Create a new account authorized by a service
      operationId: create-account
      parameters:
        - name: token
          in: query
          description: admin token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoToken'
        '400':
          description: invalid link message
        '401':
          description: unknown token
        '406':
          description: account limit reached
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkMessage'

  /access/accounts/attached:
    post:
      tags:
        - access
      description: Attach authorized service to accound specified by id
      operationId: attach-account
      parameters:
        - name: amigoId
          in: query
          description: id of referenced account
          required: true
          schema:
            type: string
            format: amigo-id
        - name: pass
          in: query
          description: pass token to attaching services
          required: true
          schema:
            type: string
            format: pass-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoToken'
        '401':
          description: unknow token
        '406':
          description: service limit reached
        '405':
          description: permission not granted for token
        '423':
          description: account or service is disabled
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkMessage'

  /access/accounts/tokens:
    post:
      tags:
        - access
      description: Create a single use token to allow attachment of service
      operationId: generate-pass
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: expire
          in: query
          description: expiration seconds for pass
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pass'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account or service is disabled
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccess'

  /access/services/tokens:
    post:
      tags:
        - access
      description: Register created user account back in service account
      operationId: assign-account
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntry'
        '401':
          description: unknow token
        '400':
          description: invalid amigo message
        '405':
          description: permission not granted for token
        '406':
          description: account limit reached
        '423':
          description: account or service is disabled
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmigoToken'


  /account/configs:
    get:
      tags:
        - account
      description: Retrieve configs set for account
      operationId: get-configs
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied

  /account/configs/{configId}:
    get:
      tags:
        - account
      description: Get config value for specified key
      operationId: get-config
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: configId
          in: path
          description: id of config entry
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied
        '404':
          description: key not found
    put:
      tags:
        - account
      summary: Set config value to specified value
      description: Set config value to specified value in request payload
      operationId: set-config
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: configId
          in: path
          description: id of config entry
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied
        '404':
          description: key not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: new value for config key
        required: true
    delete:
      tags:
        - account
      description: Restore default value for specified config key
      operationId: remove-config
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: configId
          in: path
          description: id of config entry
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: key not found

  /account/alerts:
    get:
      tags:
        - account
      description: Get registered system events
      operationId: get-alerts
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertEntry'
        '403':
          description: access denied
        '404':
          description: key not found

  /account/alert/{alertId}:
    delete:
      tags:
        - account
      description: Delete specified system event
      operationId: remove-alert
      parameters:
        - name: token
          in: query
          description: shared token with app
          required: true
          schema:
            type: string
            format: secure-token
        - name: alertId
          in: path
          description: id of alert entry
          required: true
          schema:
            type: string
            format: alert-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /service/amigos:
    get:
      tags:
        - service
      description: Retrive list of apps
      operationId: get-apps
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceEntry'
        '403':
          description: access denied

  /service/amigos/{amigoId}:
    get:
      tags:
        - service
      description: Get service entry
      operationId: get-service-entry
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of service entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEntry'
        '403':
          description: access denied
    put:
      tags:
        - service
      description: Set authorized access for app
      operationId: set-service-permission
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of service entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEntry'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccess'
        description: updated access rights
        required: true
    delete:
      tags:
        - service
      description: Delete app entry
      operationId: delete-app
      parameters:
        - name: token
          in: query
          description: Service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of service entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /service/revision:
    get:
      tags:
        - service
      description: Retrieve revision for service module
      operationId: get-service-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /user/amigos:
    get:
      tags:
        - user
      description: Retrive list of users for service
      operationId: get-users
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEntry'
        '403':
          description: access denied

  /user/amigos/{amigoId}:
    get:
      tags:
        - user
      description: Retrieve user entry for service
      operationId: get-user
      parameters:
        - name: token
          in: query
          description: Service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: uuid of user entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntry'
        '403':
          description: access denied
    delete:
      tags:
        - user
      description: Delete user entry
      operationId: remove-user
      parameters:
        - name: token
          in: query
          description: service-access-token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of service entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /user/amigos/{amigoId}/identity:
    get:
      tags:
        - user
      description: Retrieve user entry for service
      operationId: get-user-identity
      parameters:
        - name: token
          in: query
          description: Service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: uuid of user entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '403':
          description: access denied

  /user/revision:
    get:
      tags:
        - user
      description: Retrieve revision of user module
      operationId: get-user-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /identity:
    get:
      tags:
        - identity
      description: Get public profile data
      operationId: get-identity
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error

  /identity/message:
    get:
      tags:
        - identity
      description: Get message for public profile
      operationId: get-identity-message
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error

  /identity/name:
    put:
      tags:
        - identity
      description: Set account name in public profile
      operationId: update-name
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              type: string

  /identity/description:
    put:
      tags:
        - identity
      description: Set account description in public profile
      operationId: update-description
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              type: string

  /identity/image:
    get:
      tags:
        - identity
      description: Get account image in public profile
      operationId: get-identity-image
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
    put:
      tags:
        - identity
      description: Set account image in public profile
      operationId: update-image
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              type: string

  /identity/location:
    put:
      tags:
        - identity
      description: Set account location in public profile
      operationId: update-location
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              type: string

  /identity/registry:
    put:
      tags:
        - identity
      description: Set account registry in public profile
      operationId: update-registry
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              type: string

  /identity/handle:
    put:
      tags:
        - identity
      description: Set account handle in public profile
      operationId: update-handle
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              type: string

  /identity/dirty:
    get:
      tags:
        - identity
      description: Get dirty flag for public profile which tells account holder if identity should be syncrhonized externally
      operationId: get-dirty-flag
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error
    put:
      tags:
        - identity
      description: Update dirty flag for public profile indicating external synchronization state
      operationId: set-dirty-flag
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: flag
          in: query
          description: dirty value to set
          required: true
          schema:
            type: boolean
        - name: revision
          in: query
          description: apply only if at given revision
          required: false
          schema:
            type: number
            format: int32
      responses:
        '200':
          description: successful operation
        '401':
          description: unknow token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error

  /identity/revision:
    get:
      tags:
        - identity
      description: Get revision of profile identity
      operationId: get-identity-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /listing/identity:
    get:
      tags:
        - listing
      description: Get public profile data
      operationId: get-listing-identity
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      - name: agent
        in: query
        description: token from delivered auth message
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '403':
          description: unknown token
        '500':
          description: internal server error

  /group/labels:
    get:
      tags:
        - group
      description: Retrieve specified set of labels
      operationId: get-labels
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
    post:
      tags:
        - group
      description: Add a new label entry
      operationId: add-label
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: name
          in: query
          description: name for new label
          required: false
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /group/labels/view:
    get:
      tags:
        - group
      description: Retrieve id view of labels
      operationId: get-labels-view
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelView'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /group/labels/{labelId}:
    get:
      tags:
        - group
      description: Retrieve specified label
      operationId: get-label
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: labelId
          in: path
          description: specified label
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntry'
        '401':
          description: unknown token
        '404':
          description: not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
    delete:
      tags:
        - group
      description: Rewmove label entry
      operationId: remove-label
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: labelId
          in: path
          description: id of label to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: unknown token
        '404':
          description: label not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /group/labels/{labelId}/name:
    put:
      tags:
        - group
      description: Update label name
      operationId: update-label-name
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: labelId
          in: path
          description: id of label to update
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: updated name for label
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntry'
        '401':
          description: unknown token
        '404':
          description: label not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /group/revision:
    get:
      tags:
        - group
      description: Retrieve revision of group module
      operationId: get-group-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied



  /profile/attributes:
    post:
      tags:
        - profile
      description: Add a new attribute
      operationId: add-attribute
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: schema of attribute
          required: true
          schema:
            type: string
            format: attribute-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: base64 encoded attribute format
        description: payload of attribute

  /profile/attributes/filter:
    post:
      tags:
        - profile
      description: Retrieve filtered set of attributes
      operationId: filter-attributes
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: subject-id

  /profile/attributes/view:
    post:
      tags:
        - profile
      description: Retrieve attribute label association
      operationId: view-attributes
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeView'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: subject-id

  /profile/attributes/{attributeId}:
    get:
      tags:
        - profile
      description: Retrieve specified attribute
      operationId: get-attribute
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of attribute
          required: true
          schema:
            type: string
            format: attribute-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeEntry'
        '403':
          description: access denied
        '404':
          description: not found
    put:
      tags:
        - profile
      description: Retrieve specified attribute
      operationId: set-attribute
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of attribute
          required: true
          schema:
            type: string
            format: attribute-id
        - name: schema
          in: query
          description: schema of attribute
          required: true
          schema:
            type: string
            format: attribute-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeEntry'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: base64 encoded attribute format
        description: payload of attribute
    delete:
      tags:
        - profile
      description: Remove specified attribute
      operationId: remove-attribute
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: attribute-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /profile/labels:
    get:
      tags:
        - profile
      description: Retrieve list of labels. (functionally the same as /group/labels)
      operationId: get-profile-labels
      parameters:
        - name: token
          in: query
          description: token assigned to service
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /profile/attributes/{attributeId}/labels/{labelId}:
    post:
      tags:
        - profile
      description: Assign a label to an attribute entry
      operationId: set-attribute-label
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of attribute
          required: true
          schema:
            type: string
            format: attribute-id
        - name: labelId
          in: path
          description: id of label
          required: true
          schema:
            type: string
            format: label-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
    delete:
      tags:
        - profile
      description: Remove label assignment from attribute
      operationId: clear-attribute-label
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of attribute
          required: true
          schema:
            type: string
            format: attribute-id
        - name: labelId
          in: path
          description: id of label
          required: true
          schema:
            type: string
            format: label-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /profile/attributes/{attributeId}/labels:
    put:
      tags:
        - profile
      description: Remove label assignment from attribute entry
      operationId: set-attribute-labels
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: attribute-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: label-id

  /profile/revision:
    get:
      tags:
        - profile
      description: Retrieve revision of profile module
      operationId: get-profile-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied



  /index/amigos:
    get:
      tags:
        - index
      description: Retrieve amigo data
      operationId: get-amigos
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmigoEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
    post:
      tags:
        - index
      description: Add a new amigo
      operationId: add-amigo
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmigoMessage'
        description: message describing amigo
    put:
      tags:
        - index
      description: Update amigo public data
      operationId: update-amigo
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmigoMessage'
        description: message describing amigo

  /index/amigos/view:
    get:
      tags:
        - index
      description: Retrieve amigo label association
      operationId: view-amigos
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmigoView'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /index/amigos/{amigoId}:
    get:
      tags:
        - index
      description: Retrieve specified attribute
      operationId: get-amigo
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'
        '403':
          description: access denied
        '404':
          description: not found
    delete:
      tags:
        - index
      description: Remove specified amigo
      operationId: remove-amigo
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /index/amigos/{amigoId}/logo:
    get:
      tags:
        - index
      description: Retrieve specified attribute
      operationId: get-amigo-logo
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: access denied
        '404':
          description: not found

  /index/amigos/{amigoId}/identity:
    get:
      tags:
        - index
      description: Retrieve specified attribute
      operationId: get-amigo-identity
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '403':
          description: access denied
        '404':
          description: not found

  /index/amigos/{amigoId}/revision:
    get:
      tags:
        - index
      description: Retrieve specified amigo revision
      operationId: get-amigo-revision
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: number
        '403':
          description: access denied
        '404':
          description: not found

  /index/amigos/{amigoId}/notes:
    put:
      tags:
        - index
      description: Update specified amigo notes
      operationId: update-amigo-notes
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: base64 encoded notes
        description: notes for amigo
    delete:
      tags:
        - index
      description: Remove specified amigo notes
      operationId: remove-amigo-notes
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'
        '403':
          description: access denied
        '404':
          description: not found

  /index/labels:
    get:
      tags:
        - index
      description: Retrieve list of labels (functionally the same as /group/labels)
      operationId: get-index-labels
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelEntry'

  /index/amigos/{amigoId}/labels/{labelId}:
    post:
      tags:
        - index
      description: Associate amigo and label
      operationId: add-amigo-label
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: labelId
          in: path
          description: referenced label entry
          required: true
          schema:
            type: string
            format: label-id
        - name: amigoId
          in: path
          description: referenced amigo entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'
    delete:
      tags:
        - index
      description: Delete amigo from label
      operationId: remove-amigo-label
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: labelId
          in: path
          description: id of label entry
          required: true
          schema:
            type: string
            format: label-id
        - name: amigoId
          in: path
          description: id of amigo entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'

  /index/amigos/{amigoId}/labels:
    put:
      tags:
        - index
      description: Remove label assignment from amigo entry
      operationId: set-amigo-labels
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: label-id

  /index/requests/view:
    get:
      tags:
        - index
      description: Retrieve list of unregistered amigos requested to share with
      operationId: get-amigo-requests
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingAmigoView'

  /index/requests/{shareId}:
    get:
      tags:
        - index
      description: Retrieve unregistered amigo requested to share with
      operationId: get-pending-request
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: shareId
          in: path
          description: id of referenced request
          required: true
          schema:
            type: string
            format: share-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingAmigo'
    delete:
      tags:
        - index
      description: Delete amigo request entry
      operationId: remove-amigo-request
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: shareId
          in: path
          description: id of referenced request
          required: true
          schema:
            type: string
            format: share-id
        - name: reject
          in: query
          description: add to reject list
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareMessage'

  /index/rejects:
    get:
      tags:
        - index
      description: Retieve blocked amigo list
      operationId: get-amigo-rejects
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: amigo-id

  /index/rejects/{amigoId}:
    post:
      tags:
        - index
      description: Add entry to blocked amigo list
      operationId: add-amigo-reject
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of referenced amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - index
      description: Delete entry from blocked amigo list
      operationId: remove-amigo-reject
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of referenced amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation

  /index/revision:
    get:
      tags:
        - index
      description: Retrieve revision of index module
      operationId: get-index-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /prompt/questions:
    get:
      tags:
        - prompt
      description: Retrieve prompt entries
      operationId: get-questions
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PromptEntry'
        '403':
          description: access denied
    post:
      tags:
        - prompt
      description: Create a new prompt question
      operationId: add-question
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptEntry'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptQuestion'
        description: new question to be appended
        required: true

  /prompt/questions/{promptId}:
    put:
      tags:
        - prompt
      description: Update prompt entry
      operationId: update-question
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: promptId
          in: path
          description: id of prompt entry
          required: true
          schema:
            type: string
            format: prompt-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptEntry'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptQuestion'
        description: new request to be appended
        required: true
    delete:
      tags:
        - prompt
      description: Delete prompt entry
      operationId: remove-question
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: promptId
          in: path
          description: id of entry to delete
          required: true
          schema:
            type: string
            format: prompt-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: entry not found

  /prompt/questions/{promptId}/answers:
    post:
      tags:
        - prompt
      description: Prompt question to add
      operationId: add-question-answer
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: promptId
          in: path
          description: id of associated question
          required: true
          schema:
            type: string
            format: prompt-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptEntry'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: new answer to be appended
        required: true

  /prompt/questions/{promptId}/answers/{answerId}:
    delete:
      tags:
        - prompt
      description: Delete prompt answer entry
      operationId: delete-question-answer
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: promptId
          in: path
          description: id of question entry
          required: true
          schema:
            type: string
            format: prompt-id
        - name: answerId
          in: path
          description: id of answer entry
          required: true
          schema:
            type: string
            format: answer-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptEntry'
        '403':
          description: access denied
        '404':
          description: entry not found

  /prompt/revision:
    get:
      tags:
        - prompt
      description: Retrieve revision of prompt module
      operationId: get-prompt-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /share/amigos:
    get:
      tags:
        - share
      description: Retrieve amigo data
      operationId: get-share-amigos
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmigoEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /share/connections:
    get:
      tags:
        - share
      description: Retrieve list of share entries
      operationId: get-connections
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShareEntry'
        '403':
          description: access denied
    post:
      tags:
        - share
      description: Create new share entry
      operationId: add-connection
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: query
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareEntry'
        '403':
          description: access denied

  /share/connections/view:
    get:
      tags:
        - share
      description: Retrieve list of share ids
      operationId: get-connections-view
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShareView'
        '403':
          description: access denied

  /share/answers:
    post:
      tags:
        - share
      description: Response to share prompt
      operationId: set-answer
      parameters:
        - name: token
          in: query
          description: token identifying prompt session
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareStatus'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: new share request

  /share/connections/{shareId}:
    get:
      tags:
        - share
      description: Retrieve a share entry
      operationId: get-connection
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: shareId
          in: path
          description: id referencing share entry
          required: true
          schema:
            type: string
            format: share-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareEntry'
        '403':
          description: access denied
    delete:
      tags:
        - share
      description: Delete a share entry
      operationId: remove-connection
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: shareId
          in: path
          description: id referencing share entry
          required: true
          schema:
            type: string
            format: share-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied

  /share/connections/{shareId}/status:
    put:
      tags:
        - share
      description: retrieve share entry
      operationId: update-connection
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: shareId
          in: path
          description: id referencing share entry
          required: true
          schema:
            type: string
            format: share-id
        - name: status
          in: query
          description: state of share to update
          required: true
          schema:
            type: string
            enum: [requesting, requested, received, connected, closing, closed]
        - name: shareToken
          in: query
          description: token to query amigo
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareEntry'
        '403':
          description: access denied

  /share/{shareId}/message:
    get:
      tags:
        - share
      description: Retrieve share entry message
      operationId: get-share-message
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: shareId
          in: path
          description: id referencing share entry
          required: true
          schema:
            type: string
            format: share-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareMessage'
        '403':
          description: access denied

  /share/messages:
    post:
      tags:
        - share
      description: Deliver share message
      operationId: set-share-message
      parameters:
        - name: amigoId
          in: query
          description: id of requested amigo
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareStatus'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareMessage'
        description: new share request

  /share/revision:
    get:
      tags:
        - share
      description: Retrieve revision of share module
      operationId: get-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /agent/service:
    put:
      tags:
        - agent
      description: Generate authorization message for usage
      operationId: get-agent-message
      parameters:
        - name: token
          in: query
          description: share token with access
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthMessage'

  /token/access:
    get:
      tags:
        - token
      description: Get get token access
      operationId: get-access
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccess'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '500':
          description: internal server error

  /token/agent:
    post:
      tags:
        - token
      description: Set agent authorization for token
      operationId: set-agent-message
      parameters:
        - name: token
          in: query
          description: share token with access
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthMessage'
        description: new share request

  /token/revisions:
    get:
      tags:
        - token
      description: Get revision of accessible modules
      operationId: get-revisions
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message if from contact
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revisions'
        '401':
          description: unknown token
        '500':
          description: internal server error

  /contact/attributes/filter:
    post:
      tags:
        - contact
      description: Retrieve filtered set of attributes
      operationId: filter-contact-attributes
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string

  /contact/attributes/view:
    post:
      tags:
        - contact
      description: Retrieve filtered set of attribute views
      operationId: filter-contact-views
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeView'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string

  /contact/attributes/{attributeId}:
    get:
      tags:
        - contact
      description: Retrieve specified subject
      operationId: get-contact-attribute
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: attributeId
          in: path
          description: id of attribute
          required: true
          schema:
            type: string
            format: subject-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /contact/agents:
    post:
      tags:
        - contact
      description: Retrieve authorization for remote access
      operationId: add-contact-agent
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthMessage'
        description: updated access rights
        required: true

  /contact/revision:
    get:
      tags:
        - contact
      description: Retrieve revision of contact moudle
      operationId: get-contact-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      - name: agent
        in: query
        description: token from delivered auth message
        required: false
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /show/status:
    get:
      tags:
        - show
      description: Retrieve store status
      operationId: get-show-status
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreStatus'
        '403':
          description: access denied

  /show/subjects:
    post:
      tags:
        - show
      description: Add a new subject
      operationId: add-subject
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: schema of subject
          required: false
          schema:
            type: string
            format: subject-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '403':
          description: access denied
        '404':
          description: not found

  /show/subjects/filter:
    post:
      tags:
        - show
      description: Retrieve filtered set of subjects
      operationId: filter-subjects
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
        - name: editing
          in: query
          description: show editing subjects
          required: false
          schema:
            type: boolean
        - name: pending
          in: query
          description: show pending subjects
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: subject-id

  /show/subjects/view:
    post:
      tags:
        - show
      description: Retrieve subject label association
      operationId: view-subjects
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectView'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: subject-id

  /show/subjects/{subjectId}:
    get:
      tags:
        - show
      description: Retrieve specified subject
      operationId: get-subject
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '403':
          description: access denied
        '404':
          description: not found
    delete:
      tags:
        - show
      description: Remove specified subject
      operationId: remove-subject
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /show/subjects/{subjectId}/data:
    put:
      tags:
        - show
      description: Update specified subject data
      operationId: update-subject-data
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: schema
          in: query
          description: schema of subject
          required: true
          schema:
            type: string
            format: subject-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified subject data
        description: payload of subject

  /show/subjects/{subjectId}/access:
    put:
      tags:
        - show
      description: Update specified subject data
      operationId: update-subject-access
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: share
          in: query
          description: set if subject is to be shared
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '403':
          description: access denied
        '404':
          description: not found

  /show/subjects/{subjectId}/expire:
    put:
      tags:
        - show
      description: Update specified subject expiration
      operationId: update-subject-expire
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: expire
          in: query
          description: set if subject is to expire
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '403':
          description: access denied
        '404':
          description: not found

  /show/labels:
    get:
      tags:
        - show
      description: Retrieve list of labels. (functionally the same as /group/labels)
      operationId: get-show-labels
      parameters:
        - name: token
          in: query
          description: token assigned to service
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelEntry'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /show/subjects/{subjectId}/labels/{labelId}:
    post:
      tags:
        - show
      description: Assign a label to a subject entry
      operationId: add-subject-label
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of attribute
          required: true
          schema:
            type: string
            format: subject-id
        - name: labelId
          in: path
          description: id of label
          required: true
          schema:
            type: string
            format: label-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
    delete:
      tags:
        - show
      description: Remove label assignment from subject entry
      operationId: clear-subject-label
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: labelId
          in: path
          description: id of label
          required: true
          schema:
            type: string
            format: label-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error

  /show/subjects/{subjectId}/labels:
    put:
      tags:
        - show
      description: Remove label assignment from subject entry
      operationId: set-subject-labels
      parameters:
        - name: token
          in: query
          description: share token with service
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '401':
          description: unknown token
        '404':
          description: attribute not found
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: label-id

  /show/subjects/{subjectId}/assets:
    post:
      tags:
        - show
      description: Add asset to subject
      operationId: add-subject-asset
      parameters:
        - name: token
          in: query
          description: share token with Service service
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: transforms
          in: query
          description: asset transformations
              V01. MP4 -vf scale=720:-2 -vcodec libx264 -crf 27 -preset veryfast -acodec aac
              V02. MP4 -vf scale=1280:-2 -vcodec libx264 -crf 27 -preset veryfast -acodec aac
              V03. MP4 -vf scale=1920:-2 -vcodec libx264 -crf 27 -preset veryfast -acodec aac
              V04. MP4 -vf scale=320:-2 -vcodec libx264 -crf 27 -preset veryfast -acodec aac
              A01. MP3 -codec:a libmp3lame -qscale:a 6
              A02. MP3 -codec:a libmp3lame -qscale:a 2
              A03. MP3 -codec:a libmp3lame -qscale:a 0
              A04. MP3 -codec:a libmp3lame -qscale:a 8
              P01. JPG -strip -resize 1280x720\>
              P02. JPG -strip -resize 2688x1520\>
              P03. JPG -strip -resize 3840x2160\>
              P04. JPG -strip -resize 360x360\>
              P05. JPG -strip -resize 256x256\>
              P06. JPG -strip -resize 128x128\>
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        description: new asset entry
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary

  /show/subjects/{subjectId}/assets/{assetId}:
    get:
      tags:
        - show
      description: Retrieve specified asset
      operationId: get-subject-asset
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: assetId
          in: path
          description: id of asset
          required: true
          schema:
            type: string
            format: asset-id
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: access denied
        '404':
          description: token or id not found
    delete:
      tags:
        - show
      description: Delete asset from subject
      operationId: remove-subject-asset
      parameters:
        - name: token
          in: query
          description: service access token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: assetId
          in: path
          description: id of asset
          required: true
          schema:
            type: string
            format: asset-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectEntry'
        '403':
          description: access denied
        '404':
          description: not found

  /show/subjects/{subjectId}/tags:
    get:
      tags:
        - show
      description: Retrieve specified subject tags
      operationId: get-subject-tags
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: schema
          in: query
          description: key of tag data object
          required: true
          schema:
            type: string
            format: schema-key
        - name: descending
          in: query
          description: order by earliest first
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectTag'
        '403':
          description: access denied
        '404':
          description: not found
    post:
      tags:
        - show
      description: Add specified subject tags
      operationId: add-subject-tags
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: schema
          in: query
          description: key of tag data object
          required: true
          schema:
            type: string
            format: schema-key
        - name: descending
          in: query
          description: order by earliest first
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectTag'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified subject tag data
        description: payload of subject

  /show/subjects/{subjectId}/tags/{tagId}:
    delete:
      tags:
        - show
      description: Remove specified subject tag
      operationId: remove-subject-tag
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: tagId
          in: path
          description: id of tag
          required: true
          schema:
            type: string
            format: tag-id
        - name: schema
          in: query
          description: key of tag data objects to return
          required: true
          schema:
            type: string
            format: schema-key
        - name: descending
          in: query
          description: order by earliest first
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectTag'
        '403':
          description: access denied
        '404':
          description: not found

  /show/revision:
    get:
      tags:
        - show
      description: Retrieve revision of show module
      operationId: get-show-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /view/subjects/filter:
    post:
      tags:
        - view
      description: Retrieve filtered set of subjects
      operationId: filter-view-subjects
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string

  /view/subjects/view:
    post:
      tags:
        - view
      description: Retrieve filtered set of subjects
      operationId: filter-view-revisions
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectView'
        '401':
          description: unknown token
        '405':
          description: permission not granted for token
        '423':
          description: account locked
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string

  /view/subjects/{subjectId}:
    get:
      tags:
        - view
      description: Retrieve specified subject
      operationId: get-view-subject
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /view/subjects/{subjectId}/assets/{assetId}:
    get:
      tags:
        - view
      description: Retrieve specified asset
      operationId: get-view-subject-asset
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: assetId
          in: path
          description: id of asset
          required: true
          schema:
            type: string
            format: asset-id
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: access denied
        '404':
          description: token or id not found

  /view/subjects/{subjectId}/tags:
    get:
      tags:
        - view
      description: Retrieve specified subject tags
      operationId: get-view-subject-tags
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: schema
          in: query
          description: key of tag data object
          required: true
          schema:
            type: string
            format: schema-key
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: descending
          in: query
          description: order by earliest first
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectTag'
        '403':
          description: access denied
        '404':
          description: not found
    post:
      tags:
        - view
      description: Add specified subject tags
      operationId: add-view-subject-tags
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: schema
          in: query
          description: key of tag data object
          required: true
          schema:
            type: string
            format: schema-key
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: descending
          in: query
          description: order by earliest first
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectTag'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified subject tag data
        description: payload of subject

  /view/subjects/{subjectId}/tags/{tagId}:
    delete:
      tags:
        - view
      description: Remove specified subject tag
      operationId: remove-view-subject-tag
      parameters:
        - name: token
          in: query
          description: share service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: subjectId
          in: path
          description: id of subject
          required: true
          schema:
            type: string
            format: subject-id
        - name: tagId
          in: path
          description: id of tag
          required: true
          schema:
            type: string
            format: tag-id
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: key of tag data objects to return
          required: true
          schema:
            type: string
            format: schema-key
        - name: descending
          in: query
          description: order by earliest first
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectTag'
        '403':
          description: access denied
        '404':
          description: not found

  /view/agents:
    post:
      tags:
        - view
      description: Retrieve authorization for remote access
      operationId: add-view-agent
      parameters:
        - name: token
          in: query
          description: share token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthMessage'
        description: updated access rights
        required: true

  /view/revision:
    get:
      tags:
        - view
      description: Retrieve revision of view module
      operationId: get-view-revision
      parameters:
      - name: token
        in: query
        description: service access token
        required: true
        schema:
          type: string
          format: secure-token
      - name: agent
        in: query
        description: token from delivered auth message
        required: false
        schema:
          type: string
          format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '403':
          description: access denied

  /conversation/insight/view:
    get:
      tags:
        - conversation
      description: Retrieve list views
      operationId: get-conversation-insight-views
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InsightView'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /conversation/insight/{dialogueId}:
    get:
      tags:
        - conversation
      description: Retrieve specified insight
      operationId: get-conversation-insight
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: query
          description: id of amigo
          required: true
          schema:
            type: string
            format: amigo-id
        - name: dialogueId
          in: path
          description: id of insight
          required: true
          schema:
            type: string
            format: insight-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        '403':
          description: access denied
        '404':
          description: token or id not found
    put:
      tags:
        - conversation
      description: Update specified insight
      operationId: update-conversation-insight
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: query
          description: id of contact
          required: true
          schema:
            type: string
            format: amigo-id
        - name: dialogueId
          in: path
          description: id of insight
          required: true
          schema:
            type: string
            format: dialogu-id
        - name: revision
          in: query
          description: revision of linked dialogue
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        '403':
          description: access denied
        '404':
          description: token or id not found
    delete:
      tags:
        - conversation
      description: Remove specified insight
      operationId: remove-conversation-insight
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: query
          description: id of contact
          required: true
          schema:
            type: string
            format: amigo-id
        - name: dialogueId
          in: path
          description: id of insight
          required: true
          schema:
            type: string
            format: insight-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: token or id not found


  /conversation/dialogue/view:
    get:
      tags:
        - conversation
      description: Retrieve list views
      operationId: get-conversation-dialogue-views
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DialogueView'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /conversation/dialogue:
    post:
      tags:
        - conversation
      description: Add a new dailogue
      operationId: add-conversation-dialogue
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: query
          description: amigo to converse with
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialogue'
        '400':
          description: unknown token
        '406':
          description: account disabled
        '401':
          description: token not authorized
        '404':
          description: specified amigo not found
        '429':
          description: conversation limit reached
        '500':
          description: server error

  /conversation/dialogue/{dialogueId}:
    get:
      tags:
        - conversation
      description: Retrieve specified dailogue
      operationId: get-conversation-dialogue
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialogue'
        '403':
          description: access denied
        '404':
          description: token or id not found
    put:
      tags:
        - conversation
      description: Update specified dailogue
      operationId: set-conversation-dialogue
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: linked
          in: query
          description: if insight has been created
          required: false
          schema:
            type: boolean
        - name: synced
          in: query
          description: if insight has been synced
          required: false
          schema:
            type: boolean
        - name: active
          in: query
          description: if conversation can recived comments
          required: false
          schema:
            type: boolean
        - name: revision
          in: query
          description: apply if version matches
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialogue'
        '403':
          description: access denied
        '404':
          description: token or id not found
    delete:
      tags:
        - conversation
      description: Remvoe specified dailogue
      operationId: remove-conversation-dialogue
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: token or id not found

  /conversation/dialogue/{dialogueId}/topic/view:
    get:
      tags:
        - conversation
      description: Retrieve list topcis
      operationId: get-conversation-topic-views
      parameters:
        - name: dialogueId
          in: path
          description: id of specified dialog
          required: true
          schema:
            type: string
            format: dialog-id
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicView'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /conversation/dialogue/{dialogueId}/topic/{topicId}:
    get:
      tags:
        - conversation
      description: Retrieve list topcis
      operationId: get-conversation-topic
      parameters:
        - name: dialogueId
          in: path
          description: id of specified dialog
          required: true
          schema:
            type: string
            format: dialog-id
        - name: topicId
          in: path
          description: id of specified topic
          required: true
          schema:
            type: string
            format: topic-id
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: only retrieve specified schema
          required: false
          schema:
            type: string
            format: blurb-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /conversation/dialogue/{dialogueId}/blurb:
    post:
      tags:
        - conversation
      description: Add blurb to topic and dialog
      operationId: add-conversation-blurb
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: schema
          in: query
          description: schema of blurb
          required: true
          schema:
            type: string
            format: blurb-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        '403':
          description: access denied
        '404':
          description: token or id not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified blurb
        description: blurb data

  /conversation/dialogue/{dialogueId}/blurb/{blurbId}:
    put:
      tags:
        - conversation
      description: Update specified blurb
      operationId: set-conversation-blurb
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: blurbId
          in: path
          description: id of blurb
          required: true
          schema:
            type: string
            format: blurb-id
        - name: schema
          in: query
          description: schema of blurb
          required: true
          schema:
            type: string
            format: blurb-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        '403':
          description: access denied
        '404':
          description: token or id not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified blurb
        description: blurb data
    delete:
      tags:
        - conversation
      description: Remvoe specified blurb
      operationId: remove-conversation-blurb
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: blurbId
          in: path
          description: id of blurb
          required: true
          schema:
            type: string
            format: blurb-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: token or id not found

  /commentary/insight:
    post:
      tags:
        - commentary
      description: Add reference to dialog
      operationId: add-commentary-insight
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: query
          description: id for new conversation
          required: false
          schema:
            type: string
            format: dialogue-id
        - name: revision
          in: query
          description: revision of conversation
          required: false
          schema:
            type: integer
            format: int32
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /commentary/insight/{dialogueId}:
    put:
      tags:
        - commentary
      description: Update reference to dialog
      operationId: update-commentary-insight
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue to remove
          required: true
          schema:
            type: string
            format: secure-token
        - name: revision
          in: query
          description: revision of remote dialog
          required: false
          schema:
            type: integer
            format: int32
        - name: agent
          in: query
          description: token from delivered auth message
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insight'
        '403':
          description: access denied
        '404':
          description: token or id not found
    delete:
      tags:
        - commentary
      description: Remove reference to dialog
      operationId: remove-commentary-insight
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue to remove
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: token or id not found

  /commentary/dialogue/{dialogueId}:
    get:
      tags:
        - commentary
      description: Retrieve specified dailogue
      operationId: get-commentary-dialogue
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialogue'
        '403':
          description: access denied
        '404':
          description: token or id not found
    put:
      tags:
        - commentary
      description: Update specified dailogue state
      operationId: update-commentary-dialogue
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: active
          in: query
          description: if conversation still active
          required: false
          schema: 
            type: boolean
        - name: synced
          in: query
          description: if insight has been synced
          required: false
          schema:
            type: boolean
        - name: revision
          in: query
          description: apply if version matches
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dialogue'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /commentary/dialogue/{dialogueId}/topic/view:
    get:
      tags:
        - commentary
      description: Retrieve list topcis
      operationId: get-commentary-topic-views
      parameters:
        - name: dialogueId
          in: path
          description: id of specified dialog
          required: true
          schema:
            type: string
            format: dialog-id
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicView'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /commentary/dialogue/{dialogueId}/topic/{topicId}:
    get:
      tags:
        - commentary
      description: Retrieve list topcis
      operationId: get-commentary-topic
      parameters:
        - name: dialogueId
          in: path
          description: id of specified dialog
          required: true
          schema:
            type: string
            format: dialog-id
        - name: topicId
          in: path
          description: id of specified topic
          required: true
          schema:
            type: string
            format: topic-id
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: only retrieve specified schema
          required: false
          schema:
            type: string
            format: blurb-key
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '403':
          description: access denied
        '404':
          description: token or id not found

  /commentary/dialogue/{dialogueId}/blurb:
    post:
      tags:
        - commentary
      description: Add comment to topic and dialog
      operationId: add-commentary-blurb
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: schema of blurb
          required: true
          schema:
            type: string
            format: blurb-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        '403':
          description: access denied
        '404':
          description: token or id not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified blurb
        description: blurb data

  /commentary/dialogue/{dialogueId}/blurb/{blurbId}:
    put:
      tags:
        - commentary
      description: Update specified blurb
      operationId: set-commentary-blurb
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: blurbId
          in: path
          description: id of blurb
          required: true
          schema:
            type: string
            format: blurb-id
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
        - name: schema
          in: query
          description: schema of blurb
          required: true
          schema:
            type: string
            format: blurb-key
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blurb'
        '403':
          description: access denied
        '404':
          description: token or id not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: stringified blurb
        description: blurb data
    delete:
      tags:
        - commentary
      description: Remvoe specified blurb
      operationId: remove-commentary-blurb
      parameters:
        - name: token
          in: query
          description: share token for service
          required: true
          schema:
            type: string
            format: secure-token
        - name: dialogueId
          in: path
          description: id of dialogue
          required: true
          schema:
            type: string
            format: dialogue-id
        - name: blurbId
          in: path
          description: id of blurb
          required: true
          schema:
            type: string
            format: blurb-id
        - name: agent
          in: query
          description: token from delivered auth message
          required: false
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: token or id not found
          
  /registry/amigo/id:
    get:
      tags:
        - registry
      description: Get id associated with handle
      operationId: get-id
      parameters:
        - name: handle
          in: query
          description: handle to validate
          required: true
          schema:
            type: string
        - name: wrap
          in: query
          description: wrap response in quotes
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: amigo-id

  /registry/amigo/messages:
    get:
      tags:
        - registry
      description: Retrieve amigo message associated with handle
      operationId: get-message
      parameters:
        - name: amigoId
          in: query
          description: referenced id
          required: false
          schema:
            type: string
            format: amigo-id
        - name: handle
          in: query
          description: referenced handle
          required: false
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '404':
          description: not found

  /registry/amigo/messages/revision:
    get:
      tags:
        - registry
      description: Retrieve revision of current amigo message
      operationId: get-registry-revision
      parameters:
        - name: amigoId
          in: query
          description: referenced id
          required: false
          schema:
            type: string
            format: amigo-id
        - name: handle
          in: query
          description: referenced handle
          required: false
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '404':
          description: not found

  /registry/amigo/messages/logo:
    get:
      tags:
        - registry
      description: Retrieve image from current amigo message
      operationId: get-logo
      parameters:
        - name: amigoId
          in: query
          description: referenced id
          required: false
          schema:
            type: string
            format: amigo-id
        - name: handle
          in: query
          description: referenced handle
          required: false
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: not found

  /registry/amigo/messages/name:
    get:
      tags:
        - registry
      description: Retrieve name from current amigo message
      operationId: get-name
      parameters:
        - name: amigoId
          in: query
          description: referenced id
          required: false
          schema:
            type: string
            format: amigo-id
        - name: handle
          in: query
          description: referenced handle
          required: false
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '404':
          description: not found

  /portal/admin:
    get:
      tags:
        - portal
      description: Check if admin has been set
      operationId: check-admin
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: invalid password
        '500':
          description: internal server error
    put:
      tags:
        - portal
      description: Set admin params
      operationId: set-admin
      parameters:
        - name: username
          in: query
          description: username for admin
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: password for admin
          required: true
          schema:
            type: string
        - name: domain
          in: query
          description: domain of node
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
        '401':
          description: invalid password
        '500':
          description: internal server error
          
  /portal/username:
    get:
      tags:
        - portal
      description: Check if username is available
      operationId: check-login
      parameters:
        - name: username
          in: query
          description: id of account
          required: true
          schema:
            type: string
        - name: amigoId
          in: query
          description: id of requestor
          required: false
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: invalid password
        '500':
          description: internal server error
          
  /portal/profile:
    get:
      tags:
        - portal
      description: Get public profile data
      operationId: get-profile
      parameters:
        - name: handle
          in: query
          description: handle to use
          required: true
          schema:
            type: string
            format: amigo-id
        - name: password
          in: query
          description: login password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '401':
          description: invalid password
        '404':
          description: handle not found
        '500':
          description: internal server error
    post:
      tags:
        - portal
      description: Add a new profile
      operationId: set-profile
      parameters:
        - name: username
          in: query
          description: username to use
          required: true
          schema:
            type: string
            format: amigo-id
        - name: password
          in: query
          description: login password
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: account create token
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '401':
          description: invalid password
        '404':
          description: handle not found
        '500':
          description: internal server error
                
  /portal/profile/login:
    put:
      tags:
        - portal
      description: Reset portal login
      operationId: reset-login
      parameters:
        - name: username
          in: query
          description: id of account
          required: true
          schema:
            type: string
        - name: newUsername
          in: query
          description: new account handle
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: new login password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: authentication set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '401':
          description: invalid password
        '500':
          description: internal server error
          
  /portal/profile/password:
    put:
      tags:
        - portal
      description: Reset portal password
      operationId: reset-password
      parameters:
        - name: password
          in: query
          description: new login password
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: token to grant permission
          required: true
          schema:
            type: string
      responses:
        '200':
          description: authentication set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '401':
          description: invalid password
        '500':
          description: internal server error
          
  /portal/profile/passcode:
    put:
      tags:
        - portal
      description: Generate pass code
      operationId: set-pass-code
      parameters:
        - name: username
          in: query
          description: username of account
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: portal login password
          required: true
          schema:
            type: string
      responses:
        '201':
          description: generated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: invalid password
        '500':
          description: internal server error

  /portal/account:
    get:
      tags:
        - portal
      description: Check if token is valid
      operationId: check-token
      parameters:
        - name: token
          in: query
          description: admin generated token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: invalid password
        '500':
          description: internal server error
    put:
      tags:
        - portal
      description: Create password reset token
      operationId: reset-token
      parameters:
        - name: amigoId
          in: query
          description: id of amigo to access
          required: true
          schema:
            type: string
            format: amigo-id
        - name: alias
          in: query
          description: device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: device password
          required: true
          schema:
            type: string
      responses:
        '201':
          description: generated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: invalid password
        '500':
          description: internal server error
    post:
      tags:
        - portal
      description: Create new account token
      operationId: account-token
      parameters:
        - name: alias
          in: query
          description: device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: device password
          required: true
          schema:
            type: string
      responses:
        '201':
          description: generated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: invalid password
        '500':
          description: internal server error
          
  /portal/amigos:
    get:
      tags:
        - portal
      description: Get list of accounts
      operationId: get-device-amigos
      parameters:
        - name: handle
          in: query
          description: handle to use
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: login password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: invalid password
        '404':
          description: handle not found
        '500':
          description: internal server error
          
  /portal/amigos/{amigoId}:
    get:
      tags:
        - portal
      description: Get profile of account
      operationId: get-device-amigo-profile
      parameters:
        - name: amigoId
          in: path
          description: id of amigo to access
          required: true
          schema:
            type: string
            format: amigo-id
        - name: handle
          in: query
          description: handle to use
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: login password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '401':
          description: invalid password
        '404':
          description: handle not found
        '500':
          description: internal server error
    delete:
      tags:
        - portal
      description: Remove account from node
      operationId: remove-device-amigo-profile
      parameters:
        - name: amigoId
          in: path
          description: id of amigo to access
          required: true
          schema:
            type: string
            format: amigo-id
        - name: alias 
          in: query
          description: device alias
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: login password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: invalid password
        '404':
          description: handle not found
        '500':
          description: internal server error
  
  /admin/info:
    get:
      tags:
        - admin
      description: Get server health status
      operationId: server-info
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: sucessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'

  /admin/server/stats:
    get:
      tags:
        - admin
      description: Get all server metrics
      operationId: get-server-stats
      parameters:
        - name: token
          in: query
          description: service token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemStat'
        '403':
          description: access denied
    post:
      tags:
        - admin
      description: Set stat record
      operationId: add-server-stat
      parameters:
        - name: token
          in: query
          description: admin stat token
          required: false
          schema:
            type: string
            format: secure-token
        - name: processor
          in: query
          description: time
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 100
        - name: memory
          in: query
          description: current memory free
          required: true
          schema:
            type: integer
            format: int64
        - name: storage
          in: query
          description: current storage free
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied

  /admin/registry/services:
    get:
      tags:
        - admin
      description: Retrieve list of matching services
      operationId: get-registry-services
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '403':
          description: access denied
    post:
      tags:
        - admin
      description: Add a new service entry
      operationId: add-registry-service
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: enable
          in: query
          description: enabled state of service
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '403':
          description: access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmigoMessage'
        description: new service to be added
        required: true

  /admin/registry/services/{amigoId}:
    get:
      tags:
        - admin
      description: Retrieve service from registry
      operationId: get-registry-service
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of service item
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '403':
          description: access denied
    put:
      tags:
        - admin
      description: Update service state
      operationId: update-registry-service
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: identifier for service entry
          required: true
          schema:
            type: string
            format: amigo-id
        - name: enable
          in: query
          description: if service is enabled
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '403':
          description: access denied
    delete:
      tags:
        - admin
      description: Delete service entry with matching id
      operationId: remove-registry-service
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of entry to delete
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: entry not found

  /admin/accounts:
    get:
      tags:
        - admin
      description: Retrieve list of registered accounts
      operationId: get-server-accounts
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountEntry'
        '403':
          description: access denied
    post:
      tags:
        - admin
      description: Add new account to server
      operationId: add-server-account
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntry'
        '403':
          description: access denied

  /admin/accounts/status:
    get:
      tags:
        - admin
      description: get status of accounts
      operationId: admin-status
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStatus'
        '401':
          description: unknown token
        '500':
          description: internal server error

  /admin/accounts/messages:
    get:
      tags:
        - admin
      description: Retrieve list of registered accounts
      operationId: get-account-messages
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmigoMessage'
        '403':
          description: access denied

  /admin/accounts/{amigoId}:
    get:
      tags:
        - admin
      description: retrieve specified account
      operationId: get-server-account
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Amigo'
        '403':
          description: access denied
    delete:
      tags:
        - admin
      description: delete specified account
      operationId: delete-account
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

  /admin/accounts/{amigoId}/enabled:
    put:
      tags:
        - admin
      description: increment identity revision
      operationId: update-server-account-enabled
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
        - name: flag
          in: query
          description: enabled state
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntry'
        '403':
          description: access denied

  /admin/accounts/{amigoId}/revision:
    put:
      tags:
        - admin
      description: increment identity revision
      operationId: update-server-account-revision
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '403':
          description: access denied

  /admin/accounts/{amigoId}/registry:
    put:
      tags:
        - admin
      description: update registry of amigo
      operationId: update-server-account-registry
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
        - name: url
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoMessage'
        '403':
          description: access denied

  /admin/accounts/{amigoId}/service:
    put:
      tags:
        - admin
      description: Attach service to account
      operationId: set-account-service
      parameters:
        - name: token
          in: query
          description: installation token
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of referenced account
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmigoToken'
        '401':
          description: unknow token
        '406':
          description: service limit reached
        '405':
          description: permission not granted for token
        '423':
          description: account or service is disabled
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkMessage'

  /admin/server/configs:
    get:
      tags:
        - admin
      description: config key value pairs are returned
      operationId: get-admin-configs
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied

  /admin/server/configs/{configId}:
    get:
      tags:
        - admin
      description: Get config value for specified key
      operationId: get-admin-config
      parameters:
        - name: token
          in: query
          description: service token
          required: true
          schema:
            type: string
            format: secure-token
        - name: configId
          in: path
          description: key of config to update
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied
        '404':
          description: key not found
    put:
      tags:
        - admin
      description: Set config value to specified value in request payload
      operationId: update-admin-config
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: configId
          in: path
          description: key of config to update
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied
        '404':
          description: key not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: new value for config key
        required: true
    delete:
      tags:
        - admin
      description: Restore default value for specified config key
      operationId: remove-admin-config
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: configId
          in: path
          description: key of config to update
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: key not found

  /admin/accounts/{amigoId}/configs:
    get:
      tags:
        - admin
      description: all config key value pairs are returned
      operationId: get-server-configs
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account to access
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied

  /admin/accounts/{amigoId}/config/{configId}:
    get:
      tags:
        - admin
      description: Get config value for specified key
      operationId: get-server-config
      parameters:
        - name: token
          in: query
          description: installation password for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account to access
          required: true
          schema:
            type: string
        - name: configId
          in: path
          description: key of config to update
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied
        '404':
          description: key not found
    put:
      tags:
        - admin
      description: Set config value to specified value in request payload
      operationId: update-server-config
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account to access
          required: true
          schema:
            type: string
            format: amigo-id
        - name: configId
          in: path
          description: key of config to update
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigEntry'
        '403':
          description: access denied
        '404':
          description: key not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: new value for config key
        required: true
    delete:
      tags:
        - admin
      summary: Reset config value to default value
      description: Restore default value for specified config key
      operationId: remove-server-config
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account to access
          required: true
          schema:
            type: string
            format: amigo-id
        - name: configId
          in: path
          description: key of config to update
          required: true
          schema:
            type: string
            format: config-id
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: key not found

  /admin/accounts/{amigoId}/alerts:
    get:
      tags:
        - admin
      description: insert alert for target account
      operationId: get-server-alerts
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertEntry'
        '403':
          description: access denied
        '404':
          description: not found
    post:
      tags:
        - admin
      description: insert alert for target account
      operationId: add-server-alert
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertEntry'
        '403':
          description: access denied
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: amigo to insert
        required: true

  /admin/accounts/{amigoId}/alerts/{alertId}:
    delete:
      tags:
        - admin
      description: Remove alert from target account
      operationId: remove-server-alert
      parameters:
        - name: token
          in: query
          description: installation token for admin access
          required: true
          schema:
            type: string
            format: secure-token
        - name: amigoId
          in: path
          description: id of account entry
          required: true
          schema:
            type: string
            format: amigo-id
        - name: alertId
          in: path
          description: id of alert entry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '403':
          description: access denied
        '404':
          description: not found

components:
  schemas:

    ServerInfo:
      type: object
      required:
        - version
      properties:
        version:
          type: string
          format: protocol-version

    AlertEntry:
      type: object
      required:
        - alertId
        - created
        - alert
      properties:
        alertId:
          type: string
        created:
          type: integer
          format: int64
        message:
          type: string

    SystemStat:
      type: object
      required:
        - timestamp
        - processor
        - memory
        - storage
        - requests
        - accounts
      properties:
        timestamp:
          type: integer
          format: int32
        processor:
          type: integer
          format: int32
        memory:
          type: integer
          format: int64
        storage:
          type: integer
          format: int64
        requests:
          type: integer
          format: int64
        accounts:
          type: integer
          format: int64

    Service:
      type: object
      required:
        - amigoId
        - enabled
      properties:
        amigoId:
          type: string
          format: amigo-id
        enabled:
          type: boolean

    AccountEntry:
      type: object
      required:
        - amigoId
        - enabled
      properties:
        amigoId:
          type: string
          format: amigo-id
        enabled:
          type: boolean

    AccountStatus:
      type: object
      required:
        - total
        - current
      properties:
        total:
          type: integer
          format: int64
        current:
          type: integer
          format: int64

    ConfigEntry:
      type: object
      required:
        - configId
        - config
      properties:
        configId:
          type: string
        config:
          $ref: '#/components/schemas/Config'

    Config:
      type: object
      properties:
        strValue:
          type: string
        numValue:
          type: integer
          format: int64
        boolValue:
          type: boolean

    Amigo:
      type: object
      required:
        - amigoId
        - node
        - revision
        - version
      properties:
        amigoId:
          type: string
          format: amigoId
        name:
          type: string
        description:
          type: string
        logo:
          type: string
          format: base64 encoding of binary image
        location:
          type: string
        node:
          type: string
          example: node.coredb.org:9999
        registry:
          type: string
          example: registry.coredb.org:8888
        revision:
          type: integer
          format: int32
        version:
          type: string
          format: protocol-version
        handle:
          type: string

    AmigoMessage:
      type: object
      required:
        - key
        - keyType
        - signature
        - data
      properties:
        key:
          type: string
          format: amigo-key
        keyType:
          type: string
        signature:
          type: string
          format: signature of Base64 data converted to hex string
        data:
          type: string
          format: Base64 & JSON serialized string of data object

    AuthMessage:
      type: object
      required:
        - amigo
        - data
        - signature
      properties:
        amigo:
          $ref: '#/components/schemas/AmigoMessage'
        data:
          type: string
          format: serialized auth json object
        signature:
          type: string
          format: signature

    Auth:
      type: object
      required:
        - amigoId
        - issued
        - expires
        - token
      properties:
        amigoId:
          type: string
          format: amigo-id
        issued:
          type: integer
          format: int64
        expires:
          type: integer
          format: int64
        token:
          type: string
          format: secure-token

    Pass:
      type: object
      required:
        - token
      properties:
        data:
          type: string
          format: pass

    AmigoToken:
      type: object
      required:
        - amigoId
        - amigo
        - signature
        - token
      properties:
        amigoId:
          type: string
          format: amigo-id
        amigo:
          $ref: '#/components/schemas/AmigoMessage'
        signature:
          type: string
          format: signature
        token:
          type: string
          format: Base64 & JSON serialized string of token

    Token:
      type: object
      required:
        - token
      properties:
        amigoId:
          type: string
          format: amigo-id
        token:
          type: string
          format: secure-token
        issued:
          type: integer
          format: int64
        expires:
          type: integer
          format: int64

    LinkMessage:
      type: object
      required:
        - amigo
        - signature
      properties:
        amigo:
          $ref: '#/components/schemas/AmigoMessage'
        signature:
          type: string
          format: signature
        create:
          type: string
          format: Base64 & JSON serialized string of link request
        attach:
          type: string
          format: Base64 & JSON serialized string of link request

    AttachLink:
      type: object
      required:
        - amigoId
        - access
        - expires
        - issued
      properties:
        amigoId:
          type: string
          format: amigo-id
        access:
          $ref: '#/components/schemas/ServiceAccess'
        expires:
          type: integer
          format: int64
        issued:
          type: integer
          format: int64

    CreateLink:
      type: object
      required:
        - access
        - expires
        - issued
      properties:
        access:
          $ref: '#/components/schemas/ServiceAccess'
        expires:
          type: integer
          format: int64
        issued:
          type: integer
          format: int64

    ServiceEntry:
      type: object
      required:
        - amigoId
        - accountAccess
        - serviceAccess
      properties:
        amigoId:
          type: string
          format: amigo-id
        accountAccess:
          $ref: '#/components/schemas/ServiceAccess'
        serviceAccess:
          $ref: '#/components/schemas/ServiceAccess'

    ServiceAccess:
      type: object
      properties:
        enableShow:
          type: boolean
        enableIdentity:
          type: boolean
        enableProfile:
          type: boolean
        enableGroup:
          type: boolean
        enableShare:
          type: boolean
        enablePrompt:
          type: boolean
        enableService:
          type: boolean
        enableIndex:
          type: boolean
        enableUser:
          type: boolean
        enableAccess:
          type: boolean
        enableAccount:
          type: boolean
        enableConversation:
          type: boolean

    Revisions:
      type: object
      properties:
        showRevision:
          type: integer
          format: int32
        identityRevision:
          type: integer
          format: int32
        profileRevision:
          type: integer
          format: int32
        groupRevision:
          type: integer
          format: int32
        shareRevision:
          type: integer
          format: int32
        promptRevision:
          type: integer
          format: int32
        serviceRevision:
          type: integer
          format: int32
        indexRevision:
          type: integer
          format: int32
        userRevision:
          type: integer
          format: int32
        listingRevision:
          type: integer
          format: int32
        contactRevision:
          type: integer
          format: int32
        viewRevision:
          type: integer
          format: int32
        insightRevision:
          type: integer
          format: int32
        dialogueRevision:
          type: integer
          format: int32

    UserEntry:
      type: object
      required:
        - amigoId
        - accountToken
        - serviceToken
      properties:
        amigoId:
          type: string
          format: amigo-id
        accountToken:
          type: string
          format: secure-token
        serviceToken:
          type: string
          format: secure-token

    ShareMessage:
      type: object
      required:
        - amigo
        - signature
      properties:
        amigo:
          $ref: '#/components/schemas/AmigoMessage'
        signature:
          type: string
          format: signature
        open:
          type: string
          format: Base64 & JSON serialized string of share open
        close:
          type: string
          format: Base64 & JSON serialized string of share close

    Share:
      type: object
      required:
        - action
        - amigoId
        - expires
        - issued
      properties:
        action:
          type: string
          enum: [open, close]
        amigoId:
          type: string
          format: amigo-id
        token:
          type: string
          format: secure-token
        expires:
          type: integer
          format: int64
        issued:
          type: integer
          format: int64

    ShareEntry:
      type: object
      required:
        - shareId
        - status
        - amigoId
      properties:
        shareId:
          type: string
          format: share-id
        revision:
          type: integer
          format: int32
        status:
          type: string
          enum: [requesting, requested, received, connected, closing, closed]
        amigoId:
          type: string
          format: amigo-id
        token:
          type: string
          format: secure-token
        updated:
          type: integer
          format: int64

    ShareView:
      type: object
      required:
        - shareId
        - revision
      properties:
        shareId:
          type: string
          format: share-id
        revision:
          type: integer
          format: int32

    ShareStatus:
      type: object
      required:
        - shareStatus
      properties:
        shareStatus:
          type: string
          enum: [pending, failed, received, connected, closed]
        pending:
          $ref: '#/components/schemas/SharePrompt'
        connected:
          type: string
          format: secure-token

    SharePrompt:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          format: secure-token
        image:
          type: string
          format: base64 image data
        text:
          type: string

    PromptEntry:
      type: object
      required:
        - promptId
        - question
        - answers
      properties:
        promptId:
          type: string
        data:
          $ref: '#/components/schemas/PromptQuestion'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/PromptAnswer'

    PromptQuestion:
      type: object
      properties:
        image:
          type: string
          format: base-image
        text:
          type: string

    PromptAnswer:
      type: object
      required:
        - answerId
      properties:
        answerId:
          type: string
          format: answer-id
        text:
          type: string

    LabelEntry:
      type: object
      required:
        - labelId
      properties:
        labelId:
          type: string
        name:
          type: string
        revision:
          type: integer
          format: int32

    LabelView:
      type: object
      required:
        - labelId
        - revision
      properties:
        labelId:
          type: string
          format: label-id
        revision:
          type: integer
          format: int32

    AmigoEntry:
      type: object
      required:
        - amigoId
        - revision
        - labels
      properties:
        amigoId:
          type: string
          format: amigo-id
        revision:
          type: integer
          format: int32
        notes:
          type: string
        labels:
          type: array
          items:
            type: string
            format: label-id

    AmigoView:
      type: object
      required:
        - amigoId
        - revision
      properties:
        amigoId:
          type: string
          format: amigo-id
        revision:
          type: integer
          format: int32

    PendingAmigoView:
      type: object
      required:
        - shareId
        - revision
      properties:
        shareId:
          type: string
          format: share-id
        revision:
          type: integer
          format: int32

    PendingAmigo:
      type: object
      required:
        - shareId
        - revision
        - message
        - updated
      properties:
        shareId:
          type: string
          format: share-id
        revision:
          type: integer
          format: int32
        message:
          $ref: '#/components/schemas/AmigoMessage'
        updated:
          type: integer
          format: int64

    Attribute:
      type: object
      required:
        - attributeId
        - revision
        - schema
        - data
      properties:
        attributeId:
          type: string
          format: attribute-id
        revision:
          type: integer
          format: int32
        schema:
          type: string
          format: attribute-key
        data:
          type: string

    AttributeEntry:
      type: object
      required:
        - attribute
        - labels
      properties:
        attribute:
          $ref: "#/components/schemas/Attribute"
        labels:
          type: array
          items:
            type: string
            format: label-id

    AttributeView:
      type: object
      required:
        - attributeId
        - revision
      properties:
        attributeId:
          type: string
          format: attribute-id
        revision:
          type: number
          format: int32

    SubjectTag:
      type: object
      required:
        - revision
        - tags
      properties:
        revision:
          type: integer
          format: int32
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    Tag:
      type: object
      required:
        - tagId
        - amigoId
        - created
        - schema
        - data
      properties:
        tagId:
          type: string
          format: comment-id
        amigoId:
          type: string
          format: amigo-id
        amigoName:
          type: string
        amigoRegistry:
          type: string
        created:
          type: integer
          format: int64
        schema:
          type: string
          format: tag-key
        data:
          type: string
          format: stringified tag data object

    Subject:
      type: object
      required:
        - subjectId
        - revision
        - created
        - modified
      properties:
        subjectId:
          type: string
          format: subject-id
        revision:
          type: integer
          format: int32
        created:
          type: integer
          format: int64
        modified:
          type: integer
          format: int64
        expires:
          type: integer
          format: int64
        schema:
          type: string
          format: subject-key
        data:
          type: string
          format: stringified subject data object

    Asset:
      type: object
      required:
        - assets
        - original
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/SubjectAsset'
        original:
          $ref: '#/components/schemas/OriginalAsset'

    SubjectEntry:
      type: object
      required:
        - subject
        - share
        - ready
        - assets
        - originals
      properties:
        subject:
          $ref: "#/components/schemas/Subject"
        share:
          type: boolean
        ready:
          type: boolean
        assets:
          type: array
          items:
            $ref: '#/components/schemas/SubjectAsset'
        originals:
          type: array
          items:
            $ref: '#/components/schemas/OriginalAsset'
        labels:
          type: array
          items:
            type: string
            format: label-id

    SubjectView:
      type: object
      required:
        - subjectId
        - revision
        - tagRevision
      properties:
        subjectId:
          type: string
          format: subject-id
        revision:
          type: integer
          format: int32
        tagRevision:
          type: integer
          format: int32

    SubjectAsset:
      required:
        - assetId
      properties:
        assetId:
          type: string
          format: asset-id
        originalId:
          type: string
          format: asset-id
        transform:
          type: string
        state:
          type: string
          enum: [uploading, pending, processing, ready, failed, deleted]
        size:
          type: integer
          format: int64
        hash:
          type: string
          format: hex encoded sha256 of file
        created:
          type: integer
          format: int64

    OriginalAsset:
      required:
        - assetId
      properties:
        assetId:
          type: string
          format: asset-id
        originalName:
          type: string
        state:
          type: string
          enum: [uploaded, deleted]
        size:
          type: integer
          format: int64
        hash:
          type: string
          format: hex encoded sha256 of file
        created:
          type: integer
          format: int64

    StoreStatus:
      type: object
      required:
        - available
        - used
      properties:
        available:
          type: integer
          format: int64
        used:
          type: integer
          format: int64

    InsightView:
      type: object
      required:
        - amigoId
        - dialogueId
        - revision
      properties:
        amigoId:
          type: string
          format: amigo-id
        dialogueId:
          type: string
          format: dialogue-id
        revision:
          type: integer
          format: int32

    Insight:
      type: object
      required:
        - dialogueId
        - amigoId
        - revision
      properties:
        dialogueId:
          type: string
          format: dialogue-id
        revision:
          type: integer
          format: int32
        amigoId:
          type: string
          format: amigo-id
        amigoRegistry:
          type: string

    DialogueView:
      type: object
      required:
        - dialogueId
        - revision
      properties:
        dialogueId:
          type: string
          format: dialogue-id
        revision:
          type: integer
          format: int32

    Dialogue:
      type: object
      required:
        - dialogueId
        - created
        - modified
        - linked
        - active
        - synced
        - revision
        - amigoId
      properties:
        dialogueId:
          type: string
          format: dialogue-id
        created:
          type: integer
          format: int32
        modified:
          type: integer
          format: int32
        revision:
          type: integer
          format: int32
        active:
          type: boolean
        linked:
          type: boolean
        synced:
          type: boolean
        amigoId:
          type: string
          format: amigo-id

    TopicView:
      type: object
      required:
        - topicId
        - position
        - revision
      properties:
        topicId:
          type: string
          format: topic-id
        position:
          type: integer
          format: int32
        revision:
          type: number
          format: int32

    Topic:
      type: object
      required:
        - topicId
        - revision
        - blurbs
      properties:
        topicId:
          type: string
          format: topic-id
        revision:
          type: integer
          format: int32
        blurbs:
          type: array
          items:
            $ref: '#/components/schemas/Blurb'

    Blurb:
      type: object
      required:
        - blurbId
        - amigoId
        - schema
        - data
        - revision
        - created
        - updated
      properties:
        blurbId:
          type: string
          format: blurb-id
        amigoId:
          type: string
          format: amigo-id
        schema:
          type: string
          format: blurb-key
        data:
          type: string
        revision:
          type: integer
          format: int32
        created:
          type: integer
          format: int32
        updated:
          type: integer
          format: int32

